{"ast":null,"code":"// api.js\n\n// Dummy data for forms\nconst forms = [{\n  id: 1,\n  title: \"Visitor's Form\",\n  responses: 50,\n  edited: 2 // days ago\n}, {\n  id: 2,\n  title: \"Application Form For Science Fair\",\n  responses: 120,\n  edited: 5 // days ago\n}];\n\n// Dummy responses for form with id 1 (Customer Feedback Form)\nconst formResponses = [{\n  id: 1,\n  fullName: \"John Doe\",\n  email: \"john.doe@example.com\",\n  message: \"Great product! Loved the service.\"\n}, {\n  id: 2,\n  fullName: \"Jane Smith\",\n  email: \"jane.smith@example.com\",\n  message: \"Good experience, but shipping was delayed.\"\n}];\n\n// Dummy analytics data\nconst analyticsData = {\n  totalViews: 2000,\n  totalSubmissions: 170,\n  uniqueVisitors: 1500,\n  avgSubmitTime: \"2 min 30 sec\",\n  chartData: [{\n    day: \"Monday\",\n    submissions: 20\n  }, {\n    day: \"Tuesday\",\n    submissions: 30\n  }, {\n    day: \"Wednesday\",\n    submissions: 40\n  }, {\n    day: \"Thursday\",\n    submissions: 50\n  }, {\n    day: \"Friday\",\n    submissions: 30\n  }]\n};\n\n// Fetch forms data\nexport const fetchForms = async () => {\n  // Simulate API delay with setTimeout\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(forms);\n    }, 500); // Simulating network delay\n  });\n};\n\n// Fetch form responses based on the form ID\nexport const fetchResponses = async formId => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      if (formId === 1) {\n        resolve(formResponses); // Returning the responses for form with id 1\n      } else {\n        resolve([]); // No responses for other forms in this dummy data\n      }\n    }, 500);\n  });\n};\n\n// Publish form and return link and embed code\nexport const publishForm = async formData => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      const formLink = `https://myform.com/forms/${formData.title.toLowerCase().replace(/ /g, '-')}`;\n      const embedCode = `<iframe src=\"${formLink}\" width=\"600\" height=\"400\"></iframe>`;\n      resolve({\n        link: formLink,\n        embedCode\n      });\n    }, 500);\n  });\n};\n\n// Fetch analytics data\nexport const fetchAnalyticsData = async () => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(analyticsData); // Returning dummy analytics data\n    }, 500);\n  });\n};","map":{"version":3,"names":["forms","id","title","responses","edited","formResponses","fullName","email","message","analyticsData","totalViews","totalSubmissions","uniqueVisitors","avgSubmitTime","chartData","day","submissions","fetchForms","Promise","resolve","setTimeout","fetchResponses","formId","publishForm","formData","formLink","toLowerCase","replace","embedCode","link","fetchAnalyticsData"],"sources":["D:/my-form/client/src/services/api.js"],"sourcesContent":["// api.js\r\n\r\n// Dummy data for forms\r\nconst forms = [\r\n    {\r\n      id: 1,\r\n      title: \"Visitor's Form\",\r\n      responses: 50,\r\n      edited: 2, // days ago\r\n    },\r\n    {\r\n      id: 2,\r\n      title: \"Application Form For Science Fair\",\r\n      responses: 120,\r\n      edited: 5, // days ago\r\n    },\r\n  ];\r\n  \r\n  // Dummy responses for form with id 1 (Customer Feedback Form)\r\n  const formResponses = [\r\n    {\r\n      id: 1,\r\n      fullName: \"John Doe\",\r\n      email: \"john.doe@example.com\",\r\n      message: \"Great product! Loved the service.\",\r\n    },\r\n    {\r\n      id: 2,\r\n      fullName: \"Jane Smith\",\r\n      email: \"jane.smith@example.com\",\r\n      message: \"Good experience, but shipping was delayed.\",\r\n    },\r\n  ];\r\n  \r\n  // Dummy analytics data\r\n  const analyticsData = {\r\n    totalViews: 2000,\r\n    totalSubmissions: 170,\r\n    uniqueVisitors: 1500,\r\n    avgSubmitTime: \"2 min 30 sec\",\r\n    chartData: [\r\n      { day: \"Monday\", submissions: 20 },\r\n      { day: \"Tuesday\", submissions: 30 },\r\n      { day: \"Wednesday\", submissions: 40 },\r\n      { day: \"Thursday\", submissions: 50 },\r\n      { day: \"Friday\", submissions: 30 },\r\n    ],\r\n  };\r\n  \r\n  // Fetch forms data\r\n  export const fetchForms = async () => {\r\n    // Simulate API delay with setTimeout\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve(forms);\r\n      }, 500); // Simulating network delay\r\n    });\r\n  };\r\n  \r\n  // Fetch form responses based on the form ID\r\n  export const fetchResponses = async (formId) => {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        if (formId === 1) {\r\n          resolve(formResponses); // Returning the responses for form with id 1\r\n        } else {\r\n          resolve([]); // No responses for other forms in this dummy data\r\n        }\r\n      }, 500);\r\n    });\r\n  };\r\n  \r\n  // Publish form and return link and embed code\r\n  export const publishForm = async (formData) => {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        const formLink = `https://myform.com/forms/${formData.title.toLowerCase().replace(/ /g, '-')}`;\r\n        const embedCode = `<iframe src=\"${formLink}\" width=\"600\" height=\"400\"></iframe>`;\r\n        resolve({ link: formLink, embedCode });\r\n      }, 500);\r\n    });\r\n  };\r\n  \r\n  // Fetch analytics data\r\n  export const fetchAnalyticsData = async () => {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve(analyticsData); // Returning dummy analytics data\r\n      }, 500);\r\n    });\r\n  };\r\n  "],"mappings":"AAAA;;AAEA;AACA,MAAMA,KAAK,GAAG,CACV;EACEC,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,gBAAgB;EACvBC,SAAS,EAAE,EAAE;EACbC,MAAM,EAAE,CAAC,CAAE;AACb,CAAC,EACD;EACEH,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,mCAAmC;EAC1CC,SAAS,EAAE,GAAG;EACdC,MAAM,EAAE,CAAC,CAAE;AACb,CAAC,CACF;;AAED;AACA,MAAMC,aAAa,GAAG,CACpB;EACEJ,EAAE,EAAE,CAAC;EACLK,QAAQ,EAAE,UAAU;EACpBC,KAAK,EAAE,sBAAsB;EAC7BC,OAAO,EAAE;AACX,CAAC,EACD;EACEP,EAAE,EAAE,CAAC;EACLK,QAAQ,EAAE,YAAY;EACtBC,KAAK,EAAE,wBAAwB;EAC/BC,OAAO,EAAE;AACX,CAAC,CACF;;AAED;AACA,MAAMC,aAAa,GAAG;EACpBC,UAAU,EAAE,IAAI;EAChBC,gBAAgB,EAAE,GAAG;EACrBC,cAAc,EAAE,IAAI;EACpBC,aAAa,EAAE,cAAc;EAC7BC,SAAS,EAAE,CACT;IAAEC,GAAG,EAAE,QAAQ;IAAEC,WAAW,EAAE;EAAG,CAAC,EAClC;IAAED,GAAG,EAAE,SAAS;IAAEC,WAAW,EAAE;EAAG,CAAC,EACnC;IAAED,GAAG,EAAE,WAAW;IAAEC,WAAW,EAAE;EAAG,CAAC,EACrC;IAAED,GAAG,EAAE,UAAU;IAAEC,WAAW,EAAE;EAAG,CAAC,EACpC;IAAED,GAAG,EAAE,QAAQ;IAAEC,WAAW,EAAE;EAAG,CAAC;AAEtC,CAAC;;AAED;AACA,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;EACpC;EACA,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;IAC9BC,UAAU,CAAC,MAAM;MACfD,OAAO,CAACnB,KAAK,CAAC;IAChB,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;EACX,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,OAAO,MAAMqB,cAAc,GAAG,MAAOC,MAAM,IAAK;EAC9C,OAAO,IAAIJ,OAAO,CAAEC,OAAO,IAAK;IAC9BC,UAAU,CAAC,MAAM;MACf,IAAIE,MAAM,KAAK,CAAC,EAAE;QAChBH,OAAO,CAACd,aAAa,CAAC,CAAC,CAAC;MAC1B,CAAC,MAAM;QACLc,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;MACf;IACF,CAAC,EAAE,GAAG,CAAC;EACT,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,OAAO,MAAMI,WAAW,GAAG,MAAOC,QAAQ,IAAK;EAC7C,OAAO,IAAIN,OAAO,CAAEC,OAAO,IAAK;IAC9BC,UAAU,CAAC,MAAM;MACf,MAAMK,QAAQ,GAAG,4BAA4BD,QAAQ,CAACtB,KAAK,CAACwB,WAAW,CAAC,CAAC,CAACC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE;MAC9F,MAAMC,SAAS,GAAG,gBAAgBH,QAAQ,sCAAsC;MAChFN,OAAO,CAAC;QAAEU,IAAI,EAAEJ,QAAQ;QAAEG;MAAU,CAAC,CAAC;IACxC,CAAC,EAAE,GAAG,CAAC;EACT,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,OAAO,MAAME,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EAC5C,OAAO,IAAIZ,OAAO,CAAEC,OAAO,IAAK;IAC9BC,UAAU,CAAC,MAAM;MACfD,OAAO,CAACV,aAAa,CAAC,CAAC,CAAC;IAC1B,CAAC,EAAE,GAAG,CAAC;EACT,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}