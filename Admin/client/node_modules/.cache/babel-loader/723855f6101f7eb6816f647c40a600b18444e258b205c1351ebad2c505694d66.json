{"ast":null,"code":"import * as XLSX from 'xlsx';\nimport { Parser } from 'json2csv';\n\n// Function to export data as Excel\nexport const exportToExcel = (data, filename) => {\n  const worksheet = XLSX.utils.json_to_sheet(data); // Convert JSON data to a worksheet\n  const workbook = XLSX.utils.book_new(); // Create a new workbook\n  XLSX.utils.book_append_sheet(workbook, worksheet, 'Sheet1'); // Append worksheet to workbook\n  XLSX.writeFile(workbook, `${filename}.xlsx`); // Write and download the file as .xlsx\n};\n\n// Function to export data as CSV\nexport const exportToCSV = (data, filename) => {\n  const json2csvParser = new Parser(); // Initialize CSV parser\n  const csv = json2csvParser.parse(data); // Convert JSON data to CSV format\n  const blob = new Blob([csv], {\n    type: 'text/csv;charset=utf-8;'\n  }); // Create a Blob with CSV data\n  const link = document.createElement('a'); // Create a download link\n  const url = URL.createObjectURL(blob);\n  link.href = url;\n  link.setAttribute('download', `${filename}.csv`); // Set filename for download\n  document.body.appendChild(link);\n  link.click(); // Trigger download\n  document.body.removeChild(link); // Clean up the DOM\n};","map":{"version":3,"names":["XLSX","Parser","exportToExcel","data","filename","worksheet","utils","json_to_sheet","workbook","book_new","book_append_sheet","writeFile","exportToCSV","json2csvParser","csv","parse","blob","Blob","type","link","document","createElement","url","URL","createObjectURL","href","setAttribute","body","appendChild","click","removeChild"],"sources":["D:/my-form/client/src/components/exportUtils.js"],"sourcesContent":["import * as XLSX from 'xlsx';\r\nimport { Parser } from 'json2csv';\r\n\r\n// Function to export data as Excel\r\nexport const exportToExcel = (data, filename) => {\r\n  const worksheet = XLSX.utils.json_to_sheet(data); // Convert JSON data to a worksheet\r\n  const workbook = XLSX.utils.book_new(); // Create a new workbook\r\n  XLSX.utils.book_append_sheet(workbook, worksheet, 'Sheet1'); // Append worksheet to workbook\r\n  XLSX.writeFile(workbook, `${filename}.xlsx`); // Write and download the file as .xlsx\r\n};\r\n\r\n// Function to export data as CSV\r\nexport const exportToCSV = (data, filename) => {\r\n  const json2csvParser = new Parser(); // Initialize CSV parser\r\n  const csv = json2csvParser.parse(data); // Convert JSON data to CSV format\r\n  const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' }); // Create a Blob with CSV data\r\n  const link = document.createElement('a'); // Create a download link\r\n  const url = URL.createObjectURL(blob);\r\n  link.href = url;\r\n  link.setAttribute('download', `${filename}.csv`); // Set filename for download\r\n  document.body.appendChild(link);\r\n  link.click(); // Trigger download\r\n  document.body.removeChild(link); // Clean up the DOM\r\n};\r\n"],"mappings":"AAAA,OAAO,KAAKA,IAAI,MAAM,MAAM;AAC5B,SAASC,MAAM,QAAQ,UAAU;;AAEjC;AACA,OAAO,MAAMC,aAAa,GAAGA,CAACC,IAAI,EAAEC,QAAQ,KAAK;EAC/C,MAAMC,SAAS,GAAGL,IAAI,CAACM,KAAK,CAACC,aAAa,CAACJ,IAAI,CAAC,CAAC,CAAC;EAClD,MAAMK,QAAQ,GAAGR,IAAI,CAACM,KAAK,CAACG,QAAQ,CAAC,CAAC,CAAC,CAAC;EACxCT,IAAI,CAACM,KAAK,CAACI,iBAAiB,CAACF,QAAQ,EAAEH,SAAS,EAAE,QAAQ,CAAC,CAAC,CAAC;EAC7DL,IAAI,CAACW,SAAS,CAACH,QAAQ,EAAE,GAAGJ,QAAQ,OAAO,CAAC,CAAC,CAAC;AAChD,CAAC;;AAED;AACA,OAAO,MAAMQ,WAAW,GAAGA,CAACT,IAAI,EAAEC,QAAQ,KAAK;EAC7C,MAAMS,cAAc,GAAG,IAAIZ,MAAM,CAAC,CAAC,CAAC,CAAC;EACrC,MAAMa,GAAG,GAAGD,cAAc,CAACE,KAAK,CAACZ,IAAI,CAAC,CAAC,CAAC;EACxC,MAAMa,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACH,GAAG,CAAC,EAAE;IAAEI,IAAI,EAAE;EAA0B,CAAC,CAAC,CAAC,CAAC;EACnE,MAAMC,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC;EAC1C,MAAMC,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACR,IAAI,CAAC;EACrCG,IAAI,CAACM,IAAI,GAAGH,GAAG;EACfH,IAAI,CAACO,YAAY,CAAC,UAAU,EAAE,GAAGtB,QAAQ,MAAM,CAAC,CAAC,CAAC;EAClDgB,QAAQ,CAACO,IAAI,CAACC,WAAW,CAACT,IAAI,CAAC;EAC/BA,IAAI,CAACU,KAAK,CAAC,CAAC,CAAC,CAAC;EACdT,QAAQ,CAACO,IAAI,CAACG,WAAW,CAACX,IAAI,CAAC,CAAC,CAAC;AACnC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}