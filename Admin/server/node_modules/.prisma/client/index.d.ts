
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Ratings
 * 
 */
export type Ratings = $Result.DefaultSelection<Prisma.$RatingsPayload>
/**
 * Model feedbackForm
 * 
 */
export type feedbackForm = $Result.DefaultSelection<Prisma.$feedbackFormPayload>
/**
 * Model Visitor
 * 
 */
export type Visitor = $Result.DefaultSelection<Prisma.$VisitorPayload>
/**
 * Model IPRExhibitionForm
 * 
 */
export type IPRExhibitionForm = $Result.DefaultSelection<Prisma.$IPRExhibitionFormPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Ratings
 * const ratings = await prisma.ratings.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Ratings
   * const ratings = await prisma.ratings.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.ratings`: Exposes CRUD operations for the **Ratings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ratings
    * const ratings = await prisma.ratings.findMany()
    * ```
    */
  get ratings(): Prisma.RatingsDelegate<ExtArgs>;

  /**
   * `prisma.feedbackForm`: Exposes CRUD operations for the **feedbackForm** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FeedbackForms
    * const feedbackForms = await prisma.feedbackForm.findMany()
    * ```
    */
  get feedbackForm(): Prisma.feedbackFormDelegate<ExtArgs>;

  /**
   * `prisma.visitor`: Exposes CRUD operations for the **Visitor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Visitors
    * const visitors = await prisma.visitor.findMany()
    * ```
    */
  get visitor(): Prisma.VisitorDelegate<ExtArgs>;

  /**
   * `prisma.iPRExhibitionForm`: Exposes CRUD operations for the **IPRExhibitionForm** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more IPRExhibitionForms
    * const iPRExhibitionForms = await prisma.iPRExhibitionForm.findMany()
    * ```
    */
  get iPRExhibitionForm(): Prisma.IPRExhibitionFormDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.20.0
   * Query Engine version: 06fc58a368dc7be9fbbbe894adf8d445d208c284
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Ratings: 'Ratings',
    feedbackForm: 'feedbackForm',
    Visitor: 'Visitor',
    IPRExhibitionForm: 'IPRExhibitionForm'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "ratings" | "feedbackForm" | "visitor" | "iPRExhibitionForm"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Ratings: {
        payload: Prisma.$RatingsPayload<ExtArgs>
        fields: Prisma.RatingsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RatingsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RatingsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingsPayload>
          }
          findFirst: {
            args: Prisma.RatingsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RatingsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingsPayload>
          }
          findMany: {
            args: Prisma.RatingsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingsPayload>[]
          }
          create: {
            args: Prisma.RatingsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingsPayload>
          }
          createMany: {
            args: Prisma.RatingsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RatingsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingsPayload>[]
          }
          delete: {
            args: Prisma.RatingsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingsPayload>
          }
          update: {
            args: Prisma.RatingsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingsPayload>
          }
          deleteMany: {
            args: Prisma.RatingsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RatingsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RatingsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingsPayload>
          }
          aggregate: {
            args: Prisma.RatingsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRatings>
          }
          groupBy: {
            args: Prisma.RatingsGroupByArgs<ExtArgs>
            result: $Utils.Optional<RatingsGroupByOutputType>[]
          }
          count: {
            args: Prisma.RatingsCountArgs<ExtArgs>
            result: $Utils.Optional<RatingsCountAggregateOutputType> | number
          }
        }
      }
      feedbackForm: {
        payload: Prisma.$feedbackFormPayload<ExtArgs>
        fields: Prisma.feedbackFormFieldRefs
        operations: {
          findUnique: {
            args: Prisma.feedbackFormFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$feedbackFormPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.feedbackFormFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$feedbackFormPayload>
          }
          findFirst: {
            args: Prisma.feedbackFormFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$feedbackFormPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.feedbackFormFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$feedbackFormPayload>
          }
          findMany: {
            args: Prisma.feedbackFormFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$feedbackFormPayload>[]
          }
          create: {
            args: Prisma.feedbackFormCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$feedbackFormPayload>
          }
          createMany: {
            args: Prisma.feedbackFormCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.feedbackFormCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$feedbackFormPayload>[]
          }
          delete: {
            args: Prisma.feedbackFormDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$feedbackFormPayload>
          }
          update: {
            args: Prisma.feedbackFormUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$feedbackFormPayload>
          }
          deleteMany: {
            args: Prisma.feedbackFormDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.feedbackFormUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.feedbackFormUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$feedbackFormPayload>
          }
          aggregate: {
            args: Prisma.FeedbackFormAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFeedbackForm>
          }
          groupBy: {
            args: Prisma.feedbackFormGroupByArgs<ExtArgs>
            result: $Utils.Optional<FeedbackFormGroupByOutputType>[]
          }
          count: {
            args: Prisma.feedbackFormCountArgs<ExtArgs>
            result: $Utils.Optional<FeedbackFormCountAggregateOutputType> | number
          }
        }
      }
      Visitor: {
        payload: Prisma.$VisitorPayload<ExtArgs>
        fields: Prisma.VisitorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VisitorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisitorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VisitorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisitorPayload>
          }
          findFirst: {
            args: Prisma.VisitorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisitorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VisitorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisitorPayload>
          }
          findMany: {
            args: Prisma.VisitorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisitorPayload>[]
          }
          create: {
            args: Prisma.VisitorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisitorPayload>
          }
          createMany: {
            args: Prisma.VisitorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VisitorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisitorPayload>[]
          }
          delete: {
            args: Prisma.VisitorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisitorPayload>
          }
          update: {
            args: Prisma.VisitorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisitorPayload>
          }
          deleteMany: {
            args: Prisma.VisitorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VisitorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VisitorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisitorPayload>
          }
          aggregate: {
            args: Prisma.VisitorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVisitor>
          }
          groupBy: {
            args: Prisma.VisitorGroupByArgs<ExtArgs>
            result: $Utils.Optional<VisitorGroupByOutputType>[]
          }
          count: {
            args: Prisma.VisitorCountArgs<ExtArgs>
            result: $Utils.Optional<VisitorCountAggregateOutputType> | number
          }
        }
      }
      IPRExhibitionForm: {
        payload: Prisma.$IPRExhibitionFormPayload<ExtArgs>
        fields: Prisma.IPRExhibitionFormFieldRefs
        operations: {
          findUnique: {
            args: Prisma.IPRExhibitionFormFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IPRExhibitionFormPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.IPRExhibitionFormFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IPRExhibitionFormPayload>
          }
          findFirst: {
            args: Prisma.IPRExhibitionFormFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IPRExhibitionFormPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.IPRExhibitionFormFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IPRExhibitionFormPayload>
          }
          findMany: {
            args: Prisma.IPRExhibitionFormFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IPRExhibitionFormPayload>[]
          }
          create: {
            args: Prisma.IPRExhibitionFormCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IPRExhibitionFormPayload>
          }
          createMany: {
            args: Prisma.IPRExhibitionFormCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.IPRExhibitionFormCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IPRExhibitionFormPayload>[]
          }
          delete: {
            args: Prisma.IPRExhibitionFormDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IPRExhibitionFormPayload>
          }
          update: {
            args: Prisma.IPRExhibitionFormUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IPRExhibitionFormPayload>
          }
          deleteMany: {
            args: Prisma.IPRExhibitionFormDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.IPRExhibitionFormUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.IPRExhibitionFormUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IPRExhibitionFormPayload>
          }
          aggregate: {
            args: Prisma.IPRExhibitionFormAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateIPRExhibitionForm>
          }
          groupBy: {
            args: Prisma.IPRExhibitionFormGroupByArgs<ExtArgs>
            result: $Utils.Optional<IPRExhibitionFormGroupByOutputType>[]
          }
          count: {
            args: Prisma.IPRExhibitionFormCountArgs<ExtArgs>
            result: $Utils.Optional<IPRExhibitionFormCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model Ratings
   */

  export type AggregateRatings = {
    _count: RatingsCountAggregateOutputType | null
    _avg: RatingsAvgAggregateOutputType | null
    _sum: RatingsSumAggregateOutputType | null
    _min: RatingsMinAggregateOutputType | null
    _max: RatingsMaxAggregateOutputType | null
  }

  export type RatingsAvgAggregateOutputType = {
    id: number | null
    iprRating: number | null
    fciptRating: number | null
    knowledge: number | null
    explanationsIPR: number | null
    explanationsFCIPT: number | null
    knowledgeBefore: number | null
    knowledgeAfter: number | null
    technicalContents: number | null
    easeOfUnderstanding: number | null
    feedbackFormId: number | null
  }

  export type RatingsSumAggregateOutputType = {
    id: number | null
    iprRating: number | null
    fciptRating: number | null
    knowledge: number | null
    explanationsIPR: number | null
    explanationsFCIPT: number | null
    knowledgeBefore: number | null
    knowledgeAfter: number | null
    technicalContents: number | null
    easeOfUnderstanding: number | null
    feedbackFormId: number | null
  }

  export type RatingsMinAggregateOutputType = {
    id: number | null
    iprRating: number | null
    fciptRating: number | null
    knowledge: number | null
    explanationsIPR: number | null
    explanationsFCIPT: number | null
    knowledgeBefore: number | null
    knowledgeAfter: number | null
    technicalContents: number | null
    easeOfUnderstanding: number | null
    feedbackFormId: number | null
  }

  export type RatingsMaxAggregateOutputType = {
    id: number | null
    iprRating: number | null
    fciptRating: number | null
    knowledge: number | null
    explanationsIPR: number | null
    explanationsFCIPT: number | null
    knowledgeBefore: number | null
    knowledgeAfter: number | null
    technicalContents: number | null
    easeOfUnderstanding: number | null
    feedbackFormId: number | null
  }

  export type RatingsCountAggregateOutputType = {
    id: number
    iprRating: number
    fciptRating: number
    knowledge: number
    explanationsIPR: number
    explanationsFCIPT: number
    knowledgeBefore: number
    knowledgeAfter: number
    technicalContents: number
    easeOfUnderstanding: number
    feedbackFormId: number
    _all: number
  }


  export type RatingsAvgAggregateInputType = {
    id?: true
    iprRating?: true
    fciptRating?: true
    knowledge?: true
    explanationsIPR?: true
    explanationsFCIPT?: true
    knowledgeBefore?: true
    knowledgeAfter?: true
    technicalContents?: true
    easeOfUnderstanding?: true
    feedbackFormId?: true
  }

  export type RatingsSumAggregateInputType = {
    id?: true
    iprRating?: true
    fciptRating?: true
    knowledge?: true
    explanationsIPR?: true
    explanationsFCIPT?: true
    knowledgeBefore?: true
    knowledgeAfter?: true
    technicalContents?: true
    easeOfUnderstanding?: true
    feedbackFormId?: true
  }

  export type RatingsMinAggregateInputType = {
    id?: true
    iprRating?: true
    fciptRating?: true
    knowledge?: true
    explanationsIPR?: true
    explanationsFCIPT?: true
    knowledgeBefore?: true
    knowledgeAfter?: true
    technicalContents?: true
    easeOfUnderstanding?: true
    feedbackFormId?: true
  }

  export type RatingsMaxAggregateInputType = {
    id?: true
    iprRating?: true
    fciptRating?: true
    knowledge?: true
    explanationsIPR?: true
    explanationsFCIPT?: true
    knowledgeBefore?: true
    knowledgeAfter?: true
    technicalContents?: true
    easeOfUnderstanding?: true
    feedbackFormId?: true
  }

  export type RatingsCountAggregateInputType = {
    id?: true
    iprRating?: true
    fciptRating?: true
    knowledge?: true
    explanationsIPR?: true
    explanationsFCIPT?: true
    knowledgeBefore?: true
    knowledgeAfter?: true
    technicalContents?: true
    easeOfUnderstanding?: true
    feedbackFormId?: true
    _all?: true
  }

  export type RatingsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ratings to aggregate.
     */
    where?: RatingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ratings to fetch.
     */
    orderBy?: RatingsOrderByWithRelationInput | RatingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RatingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ratings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ratings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ratings
    **/
    _count?: true | RatingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RatingsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RatingsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RatingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RatingsMaxAggregateInputType
  }

  export type GetRatingsAggregateType<T extends RatingsAggregateArgs> = {
        [P in keyof T & keyof AggregateRatings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRatings[P]>
      : GetScalarType<T[P], AggregateRatings[P]>
  }




  export type RatingsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RatingsWhereInput
    orderBy?: RatingsOrderByWithAggregationInput | RatingsOrderByWithAggregationInput[]
    by: RatingsScalarFieldEnum[] | RatingsScalarFieldEnum
    having?: RatingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RatingsCountAggregateInputType | true
    _avg?: RatingsAvgAggregateInputType
    _sum?: RatingsSumAggregateInputType
    _min?: RatingsMinAggregateInputType
    _max?: RatingsMaxAggregateInputType
  }

  export type RatingsGroupByOutputType = {
    id: number
    iprRating: number
    fciptRating: number
    knowledge: number
    explanationsIPR: number
    explanationsFCIPT: number
    knowledgeBefore: number
    knowledgeAfter: number
    technicalContents: number
    easeOfUnderstanding: number
    feedbackFormId: number
    _count: RatingsCountAggregateOutputType | null
    _avg: RatingsAvgAggregateOutputType | null
    _sum: RatingsSumAggregateOutputType | null
    _min: RatingsMinAggregateOutputType | null
    _max: RatingsMaxAggregateOutputType | null
  }

  type GetRatingsGroupByPayload<T extends RatingsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RatingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RatingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RatingsGroupByOutputType[P]>
            : GetScalarType<T[P], RatingsGroupByOutputType[P]>
        }
      >
    >


  export type RatingsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    iprRating?: boolean
    fciptRating?: boolean
    knowledge?: boolean
    explanationsIPR?: boolean
    explanationsFCIPT?: boolean
    knowledgeBefore?: boolean
    knowledgeAfter?: boolean
    technicalContents?: boolean
    easeOfUnderstanding?: boolean
    feedbackFormId?: boolean
    feedbackForm?: boolean | feedbackFormDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ratings"]>

  export type RatingsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    iprRating?: boolean
    fciptRating?: boolean
    knowledge?: boolean
    explanationsIPR?: boolean
    explanationsFCIPT?: boolean
    knowledgeBefore?: boolean
    knowledgeAfter?: boolean
    technicalContents?: boolean
    easeOfUnderstanding?: boolean
    feedbackFormId?: boolean
    feedbackForm?: boolean | feedbackFormDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ratings"]>

  export type RatingsSelectScalar = {
    id?: boolean
    iprRating?: boolean
    fciptRating?: boolean
    knowledge?: boolean
    explanationsIPR?: boolean
    explanationsFCIPT?: boolean
    knowledgeBefore?: boolean
    knowledgeAfter?: boolean
    technicalContents?: boolean
    easeOfUnderstanding?: boolean
    feedbackFormId?: boolean
  }

  export type RatingsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feedbackForm?: boolean | feedbackFormDefaultArgs<ExtArgs>
  }
  export type RatingsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feedbackForm?: boolean | feedbackFormDefaultArgs<ExtArgs>
  }

  export type $RatingsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Ratings"
    objects: {
      feedbackForm: Prisma.$feedbackFormPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      iprRating: number
      fciptRating: number
      knowledge: number
      explanationsIPR: number
      explanationsFCIPT: number
      knowledgeBefore: number
      knowledgeAfter: number
      technicalContents: number
      easeOfUnderstanding: number
      feedbackFormId: number
    }, ExtArgs["result"]["ratings"]>
    composites: {}
  }

  type RatingsGetPayload<S extends boolean | null | undefined | RatingsDefaultArgs> = $Result.GetResult<Prisma.$RatingsPayload, S>

  type RatingsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RatingsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RatingsCountAggregateInputType | true
    }

  export interface RatingsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Ratings'], meta: { name: 'Ratings' } }
    /**
     * Find zero or one Ratings that matches the filter.
     * @param {RatingsFindUniqueArgs} args - Arguments to find a Ratings
     * @example
     * // Get one Ratings
     * const ratings = await prisma.ratings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RatingsFindUniqueArgs>(args: SelectSubset<T, RatingsFindUniqueArgs<ExtArgs>>): Prisma__RatingsClient<$Result.GetResult<Prisma.$RatingsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Ratings that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RatingsFindUniqueOrThrowArgs} args - Arguments to find a Ratings
     * @example
     * // Get one Ratings
     * const ratings = await prisma.ratings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RatingsFindUniqueOrThrowArgs>(args: SelectSubset<T, RatingsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RatingsClient<$Result.GetResult<Prisma.$RatingsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Ratings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingsFindFirstArgs} args - Arguments to find a Ratings
     * @example
     * // Get one Ratings
     * const ratings = await prisma.ratings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RatingsFindFirstArgs>(args?: SelectSubset<T, RatingsFindFirstArgs<ExtArgs>>): Prisma__RatingsClient<$Result.GetResult<Prisma.$RatingsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Ratings that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingsFindFirstOrThrowArgs} args - Arguments to find a Ratings
     * @example
     * // Get one Ratings
     * const ratings = await prisma.ratings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RatingsFindFirstOrThrowArgs>(args?: SelectSubset<T, RatingsFindFirstOrThrowArgs<ExtArgs>>): Prisma__RatingsClient<$Result.GetResult<Prisma.$RatingsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Ratings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ratings
     * const ratings = await prisma.ratings.findMany()
     * 
     * // Get first 10 Ratings
     * const ratings = await prisma.ratings.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ratingsWithIdOnly = await prisma.ratings.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RatingsFindManyArgs>(args?: SelectSubset<T, RatingsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatingsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Ratings.
     * @param {RatingsCreateArgs} args - Arguments to create a Ratings.
     * @example
     * // Create one Ratings
     * const Ratings = await prisma.ratings.create({
     *   data: {
     *     // ... data to create a Ratings
     *   }
     * })
     * 
     */
    create<T extends RatingsCreateArgs>(args: SelectSubset<T, RatingsCreateArgs<ExtArgs>>): Prisma__RatingsClient<$Result.GetResult<Prisma.$RatingsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Ratings.
     * @param {RatingsCreateManyArgs} args - Arguments to create many Ratings.
     * @example
     * // Create many Ratings
     * const ratings = await prisma.ratings.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RatingsCreateManyArgs>(args?: SelectSubset<T, RatingsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Ratings and returns the data saved in the database.
     * @param {RatingsCreateManyAndReturnArgs} args - Arguments to create many Ratings.
     * @example
     * // Create many Ratings
     * const ratings = await prisma.ratings.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Ratings and only return the `id`
     * const ratingsWithIdOnly = await prisma.ratings.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RatingsCreateManyAndReturnArgs>(args?: SelectSubset<T, RatingsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatingsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Ratings.
     * @param {RatingsDeleteArgs} args - Arguments to delete one Ratings.
     * @example
     * // Delete one Ratings
     * const Ratings = await prisma.ratings.delete({
     *   where: {
     *     // ... filter to delete one Ratings
     *   }
     * })
     * 
     */
    delete<T extends RatingsDeleteArgs>(args: SelectSubset<T, RatingsDeleteArgs<ExtArgs>>): Prisma__RatingsClient<$Result.GetResult<Prisma.$RatingsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Ratings.
     * @param {RatingsUpdateArgs} args - Arguments to update one Ratings.
     * @example
     * // Update one Ratings
     * const ratings = await prisma.ratings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RatingsUpdateArgs>(args: SelectSubset<T, RatingsUpdateArgs<ExtArgs>>): Prisma__RatingsClient<$Result.GetResult<Prisma.$RatingsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Ratings.
     * @param {RatingsDeleteManyArgs} args - Arguments to filter Ratings to delete.
     * @example
     * // Delete a few Ratings
     * const { count } = await prisma.ratings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RatingsDeleteManyArgs>(args?: SelectSubset<T, RatingsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ratings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ratings
     * const ratings = await prisma.ratings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RatingsUpdateManyArgs>(args: SelectSubset<T, RatingsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Ratings.
     * @param {RatingsUpsertArgs} args - Arguments to update or create a Ratings.
     * @example
     * // Update or create a Ratings
     * const ratings = await prisma.ratings.upsert({
     *   create: {
     *     // ... data to create a Ratings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ratings we want to update
     *   }
     * })
     */
    upsert<T extends RatingsUpsertArgs>(args: SelectSubset<T, RatingsUpsertArgs<ExtArgs>>): Prisma__RatingsClient<$Result.GetResult<Prisma.$RatingsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Ratings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingsCountArgs} args - Arguments to filter Ratings to count.
     * @example
     * // Count the number of Ratings
     * const count = await prisma.ratings.count({
     *   where: {
     *     // ... the filter for the Ratings we want to count
     *   }
     * })
    **/
    count<T extends RatingsCountArgs>(
      args?: Subset<T, RatingsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RatingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ratings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RatingsAggregateArgs>(args: Subset<T, RatingsAggregateArgs>): Prisma.PrismaPromise<GetRatingsAggregateType<T>>

    /**
     * Group by Ratings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RatingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RatingsGroupByArgs['orderBy'] }
        : { orderBy?: RatingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RatingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRatingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Ratings model
   */
  readonly fields: RatingsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Ratings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RatingsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    feedbackForm<T extends feedbackFormDefaultArgs<ExtArgs> = {}>(args?: Subset<T, feedbackFormDefaultArgs<ExtArgs>>): Prisma__feedbackFormClient<$Result.GetResult<Prisma.$feedbackFormPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Ratings model
   */ 
  interface RatingsFieldRefs {
    readonly id: FieldRef<"Ratings", 'Int'>
    readonly iprRating: FieldRef<"Ratings", 'Int'>
    readonly fciptRating: FieldRef<"Ratings", 'Int'>
    readonly knowledge: FieldRef<"Ratings", 'Int'>
    readonly explanationsIPR: FieldRef<"Ratings", 'Int'>
    readonly explanationsFCIPT: FieldRef<"Ratings", 'Int'>
    readonly knowledgeBefore: FieldRef<"Ratings", 'Int'>
    readonly knowledgeAfter: FieldRef<"Ratings", 'Int'>
    readonly technicalContents: FieldRef<"Ratings", 'Int'>
    readonly easeOfUnderstanding: FieldRef<"Ratings", 'Int'>
    readonly feedbackFormId: FieldRef<"Ratings", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Ratings findUnique
   */
  export type RatingsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ratings
     */
    select?: RatingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingsInclude<ExtArgs> | null
    /**
     * Filter, which Ratings to fetch.
     */
    where: RatingsWhereUniqueInput
  }

  /**
   * Ratings findUniqueOrThrow
   */
  export type RatingsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ratings
     */
    select?: RatingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingsInclude<ExtArgs> | null
    /**
     * Filter, which Ratings to fetch.
     */
    where: RatingsWhereUniqueInput
  }

  /**
   * Ratings findFirst
   */
  export type RatingsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ratings
     */
    select?: RatingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingsInclude<ExtArgs> | null
    /**
     * Filter, which Ratings to fetch.
     */
    where?: RatingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ratings to fetch.
     */
    orderBy?: RatingsOrderByWithRelationInput | RatingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ratings.
     */
    cursor?: RatingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ratings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ratings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ratings.
     */
    distinct?: RatingsScalarFieldEnum | RatingsScalarFieldEnum[]
  }

  /**
   * Ratings findFirstOrThrow
   */
  export type RatingsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ratings
     */
    select?: RatingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingsInclude<ExtArgs> | null
    /**
     * Filter, which Ratings to fetch.
     */
    where?: RatingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ratings to fetch.
     */
    orderBy?: RatingsOrderByWithRelationInput | RatingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ratings.
     */
    cursor?: RatingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ratings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ratings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ratings.
     */
    distinct?: RatingsScalarFieldEnum | RatingsScalarFieldEnum[]
  }

  /**
   * Ratings findMany
   */
  export type RatingsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ratings
     */
    select?: RatingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingsInclude<ExtArgs> | null
    /**
     * Filter, which Ratings to fetch.
     */
    where?: RatingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ratings to fetch.
     */
    orderBy?: RatingsOrderByWithRelationInput | RatingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ratings.
     */
    cursor?: RatingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ratings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ratings.
     */
    skip?: number
    distinct?: RatingsScalarFieldEnum | RatingsScalarFieldEnum[]
  }

  /**
   * Ratings create
   */
  export type RatingsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ratings
     */
    select?: RatingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingsInclude<ExtArgs> | null
    /**
     * The data needed to create a Ratings.
     */
    data: XOR<RatingsCreateInput, RatingsUncheckedCreateInput>
  }

  /**
   * Ratings createMany
   */
  export type RatingsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Ratings.
     */
    data: RatingsCreateManyInput | RatingsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Ratings createManyAndReturn
   */
  export type RatingsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ratings
     */
    select?: RatingsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Ratings.
     */
    data: RatingsCreateManyInput | RatingsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Ratings update
   */
  export type RatingsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ratings
     */
    select?: RatingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingsInclude<ExtArgs> | null
    /**
     * The data needed to update a Ratings.
     */
    data: XOR<RatingsUpdateInput, RatingsUncheckedUpdateInput>
    /**
     * Choose, which Ratings to update.
     */
    where: RatingsWhereUniqueInput
  }

  /**
   * Ratings updateMany
   */
  export type RatingsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Ratings.
     */
    data: XOR<RatingsUpdateManyMutationInput, RatingsUncheckedUpdateManyInput>
    /**
     * Filter which Ratings to update
     */
    where?: RatingsWhereInput
  }

  /**
   * Ratings upsert
   */
  export type RatingsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ratings
     */
    select?: RatingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingsInclude<ExtArgs> | null
    /**
     * The filter to search for the Ratings to update in case it exists.
     */
    where: RatingsWhereUniqueInput
    /**
     * In case the Ratings found by the `where` argument doesn't exist, create a new Ratings with this data.
     */
    create: XOR<RatingsCreateInput, RatingsUncheckedCreateInput>
    /**
     * In case the Ratings was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RatingsUpdateInput, RatingsUncheckedUpdateInput>
  }

  /**
   * Ratings delete
   */
  export type RatingsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ratings
     */
    select?: RatingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingsInclude<ExtArgs> | null
    /**
     * Filter which Ratings to delete.
     */
    where: RatingsWhereUniqueInput
  }

  /**
   * Ratings deleteMany
   */
  export type RatingsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ratings to delete
     */
    where?: RatingsWhereInput
  }

  /**
   * Ratings without action
   */
  export type RatingsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ratings
     */
    select?: RatingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingsInclude<ExtArgs> | null
  }


  /**
   * Model feedbackForm
   */

  export type AggregateFeedbackForm = {
    _count: FeedbackFormCountAggregateOutputType | null
    _avg: FeedbackFormAvgAggregateOutputType | null
    _sum: FeedbackFormSumAggregateOutputType | null
    _min: FeedbackFormMinAggregateOutputType | null
    _max: FeedbackFormMaxAggregateOutputType | null
  }

  export type FeedbackFormAvgAggregateOutputType = {
    id: number | null
    totalStudents: number | null
    accompanyingStaff: number | null
  }

  export type FeedbackFormSumAggregateOutputType = {
    id: number | null
    totalStudents: number | null
    accompanyingStaff: number | null
  }

  export type FeedbackFormMinAggregateOutputType = {
    id: number | null
    institutionName: string | null
    website: string | null
    visitDate: Date | null
    staffName: string | null
    staffEmail: string | null
    staffMobile: string | null
    totalStudents: number | null
    accompanyingStaff: number | null
    best: string | null
    worst: string | null
    suggestions: string | null
    comments: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FeedbackFormMaxAggregateOutputType = {
    id: number | null
    institutionName: string | null
    website: string | null
    visitDate: Date | null
    staffName: string | null
    staffEmail: string | null
    staffMobile: string | null
    totalStudents: number | null
    accompanyingStaff: number | null
    best: string | null
    worst: string | null
    suggestions: string | null
    comments: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FeedbackFormCountAggregateOutputType = {
    id: number
    institutionName: number
    website: number
    visitDate: number
    staffName: number
    staffEmail: number
    staffMobile: number
    totalStudents: number
    accompanyingStaff: number
    sources: number
    campuses: number
    best: number
    worst: number
    suggestions: number
    comments: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FeedbackFormAvgAggregateInputType = {
    id?: true
    totalStudents?: true
    accompanyingStaff?: true
  }

  export type FeedbackFormSumAggregateInputType = {
    id?: true
    totalStudents?: true
    accompanyingStaff?: true
  }

  export type FeedbackFormMinAggregateInputType = {
    id?: true
    institutionName?: true
    website?: true
    visitDate?: true
    staffName?: true
    staffEmail?: true
    staffMobile?: true
    totalStudents?: true
    accompanyingStaff?: true
    best?: true
    worst?: true
    suggestions?: true
    comments?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FeedbackFormMaxAggregateInputType = {
    id?: true
    institutionName?: true
    website?: true
    visitDate?: true
    staffName?: true
    staffEmail?: true
    staffMobile?: true
    totalStudents?: true
    accompanyingStaff?: true
    best?: true
    worst?: true
    suggestions?: true
    comments?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FeedbackFormCountAggregateInputType = {
    id?: true
    institutionName?: true
    website?: true
    visitDate?: true
    staffName?: true
    staffEmail?: true
    staffMobile?: true
    totalStudents?: true
    accompanyingStaff?: true
    sources?: true
    campuses?: true
    best?: true
    worst?: true
    suggestions?: true
    comments?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FeedbackFormAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which feedbackForm to aggregate.
     */
    where?: feedbackFormWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of feedbackForms to fetch.
     */
    orderBy?: feedbackFormOrderByWithRelationInput | feedbackFormOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: feedbackFormWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` feedbackForms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` feedbackForms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned feedbackForms
    **/
    _count?: true | FeedbackFormCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FeedbackFormAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FeedbackFormSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeedbackFormMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeedbackFormMaxAggregateInputType
  }

  export type GetFeedbackFormAggregateType<T extends FeedbackFormAggregateArgs> = {
        [P in keyof T & keyof AggregateFeedbackForm]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeedbackForm[P]>
      : GetScalarType<T[P], AggregateFeedbackForm[P]>
  }




  export type feedbackFormGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: feedbackFormWhereInput
    orderBy?: feedbackFormOrderByWithAggregationInput | feedbackFormOrderByWithAggregationInput[]
    by: FeedbackFormScalarFieldEnum[] | FeedbackFormScalarFieldEnum
    having?: feedbackFormScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeedbackFormCountAggregateInputType | true
    _avg?: FeedbackFormAvgAggregateInputType
    _sum?: FeedbackFormSumAggregateInputType
    _min?: FeedbackFormMinAggregateInputType
    _max?: FeedbackFormMaxAggregateInputType
  }

  export type FeedbackFormGroupByOutputType = {
    id: number
    institutionName: string
    website: string
    visitDate: Date
    staffName: string
    staffEmail: string
    staffMobile: string
    totalStudents: number
    accompanyingStaff: number
    sources: string[]
    campuses: string[]
    best: string | null
    worst: string | null
    suggestions: string | null
    comments: string | null
    createdAt: Date
    updatedAt: Date
    _count: FeedbackFormCountAggregateOutputType | null
    _avg: FeedbackFormAvgAggregateOutputType | null
    _sum: FeedbackFormSumAggregateOutputType | null
    _min: FeedbackFormMinAggregateOutputType | null
    _max: FeedbackFormMaxAggregateOutputType | null
  }

  type GetFeedbackFormGroupByPayload<T extends feedbackFormGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeedbackFormGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeedbackFormGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeedbackFormGroupByOutputType[P]>
            : GetScalarType<T[P], FeedbackFormGroupByOutputType[P]>
        }
      >
    >


  export type feedbackFormSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    institutionName?: boolean
    website?: boolean
    visitDate?: boolean
    staffName?: boolean
    staffEmail?: boolean
    staffMobile?: boolean
    totalStudents?: boolean
    accompanyingStaff?: boolean
    sources?: boolean
    campuses?: boolean
    best?: boolean
    worst?: boolean
    suggestions?: boolean
    comments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ratings?: boolean | feedbackForm$ratingsArgs<ExtArgs>
  }, ExtArgs["result"]["feedbackForm"]>

  export type feedbackFormSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    institutionName?: boolean
    website?: boolean
    visitDate?: boolean
    staffName?: boolean
    staffEmail?: boolean
    staffMobile?: boolean
    totalStudents?: boolean
    accompanyingStaff?: boolean
    sources?: boolean
    campuses?: boolean
    best?: boolean
    worst?: boolean
    suggestions?: boolean
    comments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["feedbackForm"]>

  export type feedbackFormSelectScalar = {
    id?: boolean
    institutionName?: boolean
    website?: boolean
    visitDate?: boolean
    staffName?: boolean
    staffEmail?: boolean
    staffMobile?: boolean
    totalStudents?: boolean
    accompanyingStaff?: boolean
    sources?: boolean
    campuses?: boolean
    best?: boolean
    worst?: boolean
    suggestions?: boolean
    comments?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type feedbackFormInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ratings?: boolean | feedbackForm$ratingsArgs<ExtArgs>
  }
  export type feedbackFormIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $feedbackFormPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "feedbackForm"
    objects: {
      ratings: Prisma.$RatingsPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      institutionName: string
      website: string
      visitDate: Date
      staffName: string
      staffEmail: string
      staffMobile: string
      totalStudents: number
      accompanyingStaff: number
      sources: string[]
      campuses: string[]
      best: string | null
      worst: string | null
      suggestions: string | null
      comments: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["feedbackForm"]>
    composites: {}
  }

  type feedbackFormGetPayload<S extends boolean | null | undefined | feedbackFormDefaultArgs> = $Result.GetResult<Prisma.$feedbackFormPayload, S>

  type feedbackFormCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<feedbackFormFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FeedbackFormCountAggregateInputType | true
    }

  export interface feedbackFormDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['feedbackForm'], meta: { name: 'feedbackForm' } }
    /**
     * Find zero or one FeedbackForm that matches the filter.
     * @param {feedbackFormFindUniqueArgs} args - Arguments to find a FeedbackForm
     * @example
     * // Get one FeedbackForm
     * const feedbackForm = await prisma.feedbackForm.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends feedbackFormFindUniqueArgs>(args: SelectSubset<T, feedbackFormFindUniqueArgs<ExtArgs>>): Prisma__feedbackFormClient<$Result.GetResult<Prisma.$feedbackFormPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one FeedbackForm that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {feedbackFormFindUniqueOrThrowArgs} args - Arguments to find a FeedbackForm
     * @example
     * // Get one FeedbackForm
     * const feedbackForm = await prisma.feedbackForm.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends feedbackFormFindUniqueOrThrowArgs>(args: SelectSubset<T, feedbackFormFindUniqueOrThrowArgs<ExtArgs>>): Prisma__feedbackFormClient<$Result.GetResult<Prisma.$feedbackFormPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first FeedbackForm that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {feedbackFormFindFirstArgs} args - Arguments to find a FeedbackForm
     * @example
     * // Get one FeedbackForm
     * const feedbackForm = await prisma.feedbackForm.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends feedbackFormFindFirstArgs>(args?: SelectSubset<T, feedbackFormFindFirstArgs<ExtArgs>>): Prisma__feedbackFormClient<$Result.GetResult<Prisma.$feedbackFormPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first FeedbackForm that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {feedbackFormFindFirstOrThrowArgs} args - Arguments to find a FeedbackForm
     * @example
     * // Get one FeedbackForm
     * const feedbackForm = await prisma.feedbackForm.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends feedbackFormFindFirstOrThrowArgs>(args?: SelectSubset<T, feedbackFormFindFirstOrThrowArgs<ExtArgs>>): Prisma__feedbackFormClient<$Result.GetResult<Prisma.$feedbackFormPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more FeedbackForms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {feedbackFormFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FeedbackForms
     * const feedbackForms = await prisma.feedbackForm.findMany()
     * 
     * // Get first 10 FeedbackForms
     * const feedbackForms = await prisma.feedbackForm.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const feedbackFormWithIdOnly = await prisma.feedbackForm.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends feedbackFormFindManyArgs>(args?: SelectSubset<T, feedbackFormFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$feedbackFormPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a FeedbackForm.
     * @param {feedbackFormCreateArgs} args - Arguments to create a FeedbackForm.
     * @example
     * // Create one FeedbackForm
     * const FeedbackForm = await prisma.feedbackForm.create({
     *   data: {
     *     // ... data to create a FeedbackForm
     *   }
     * })
     * 
     */
    create<T extends feedbackFormCreateArgs>(args: SelectSubset<T, feedbackFormCreateArgs<ExtArgs>>): Prisma__feedbackFormClient<$Result.GetResult<Prisma.$feedbackFormPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many FeedbackForms.
     * @param {feedbackFormCreateManyArgs} args - Arguments to create many FeedbackForms.
     * @example
     * // Create many FeedbackForms
     * const feedbackForm = await prisma.feedbackForm.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends feedbackFormCreateManyArgs>(args?: SelectSubset<T, feedbackFormCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FeedbackForms and returns the data saved in the database.
     * @param {feedbackFormCreateManyAndReturnArgs} args - Arguments to create many FeedbackForms.
     * @example
     * // Create many FeedbackForms
     * const feedbackForm = await prisma.feedbackForm.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FeedbackForms and only return the `id`
     * const feedbackFormWithIdOnly = await prisma.feedbackForm.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends feedbackFormCreateManyAndReturnArgs>(args?: SelectSubset<T, feedbackFormCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$feedbackFormPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a FeedbackForm.
     * @param {feedbackFormDeleteArgs} args - Arguments to delete one FeedbackForm.
     * @example
     * // Delete one FeedbackForm
     * const FeedbackForm = await prisma.feedbackForm.delete({
     *   where: {
     *     // ... filter to delete one FeedbackForm
     *   }
     * })
     * 
     */
    delete<T extends feedbackFormDeleteArgs>(args: SelectSubset<T, feedbackFormDeleteArgs<ExtArgs>>): Prisma__feedbackFormClient<$Result.GetResult<Prisma.$feedbackFormPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one FeedbackForm.
     * @param {feedbackFormUpdateArgs} args - Arguments to update one FeedbackForm.
     * @example
     * // Update one FeedbackForm
     * const feedbackForm = await prisma.feedbackForm.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends feedbackFormUpdateArgs>(args: SelectSubset<T, feedbackFormUpdateArgs<ExtArgs>>): Prisma__feedbackFormClient<$Result.GetResult<Prisma.$feedbackFormPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more FeedbackForms.
     * @param {feedbackFormDeleteManyArgs} args - Arguments to filter FeedbackForms to delete.
     * @example
     * // Delete a few FeedbackForms
     * const { count } = await prisma.feedbackForm.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends feedbackFormDeleteManyArgs>(args?: SelectSubset<T, feedbackFormDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FeedbackForms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {feedbackFormUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FeedbackForms
     * const feedbackForm = await prisma.feedbackForm.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends feedbackFormUpdateManyArgs>(args: SelectSubset<T, feedbackFormUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FeedbackForm.
     * @param {feedbackFormUpsertArgs} args - Arguments to update or create a FeedbackForm.
     * @example
     * // Update or create a FeedbackForm
     * const feedbackForm = await prisma.feedbackForm.upsert({
     *   create: {
     *     // ... data to create a FeedbackForm
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FeedbackForm we want to update
     *   }
     * })
     */
    upsert<T extends feedbackFormUpsertArgs>(args: SelectSubset<T, feedbackFormUpsertArgs<ExtArgs>>): Prisma__feedbackFormClient<$Result.GetResult<Prisma.$feedbackFormPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of FeedbackForms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {feedbackFormCountArgs} args - Arguments to filter FeedbackForms to count.
     * @example
     * // Count the number of FeedbackForms
     * const count = await prisma.feedbackForm.count({
     *   where: {
     *     // ... the filter for the FeedbackForms we want to count
     *   }
     * })
    **/
    count<T extends feedbackFormCountArgs>(
      args?: Subset<T, feedbackFormCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeedbackFormCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FeedbackForm.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFormAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeedbackFormAggregateArgs>(args: Subset<T, FeedbackFormAggregateArgs>): Prisma.PrismaPromise<GetFeedbackFormAggregateType<T>>

    /**
     * Group by FeedbackForm.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {feedbackFormGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends feedbackFormGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: feedbackFormGroupByArgs['orderBy'] }
        : { orderBy?: feedbackFormGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, feedbackFormGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeedbackFormGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the feedbackForm model
   */
  readonly fields: feedbackFormFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for feedbackForm.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__feedbackFormClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ratings<T extends feedbackForm$ratingsArgs<ExtArgs> = {}>(args?: Subset<T, feedbackForm$ratingsArgs<ExtArgs>>): Prisma__RatingsClient<$Result.GetResult<Prisma.$RatingsPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the feedbackForm model
   */ 
  interface feedbackFormFieldRefs {
    readonly id: FieldRef<"feedbackForm", 'Int'>
    readonly institutionName: FieldRef<"feedbackForm", 'String'>
    readonly website: FieldRef<"feedbackForm", 'String'>
    readonly visitDate: FieldRef<"feedbackForm", 'DateTime'>
    readonly staffName: FieldRef<"feedbackForm", 'String'>
    readonly staffEmail: FieldRef<"feedbackForm", 'String'>
    readonly staffMobile: FieldRef<"feedbackForm", 'String'>
    readonly totalStudents: FieldRef<"feedbackForm", 'Int'>
    readonly accompanyingStaff: FieldRef<"feedbackForm", 'Int'>
    readonly sources: FieldRef<"feedbackForm", 'String[]'>
    readonly campuses: FieldRef<"feedbackForm", 'String[]'>
    readonly best: FieldRef<"feedbackForm", 'String'>
    readonly worst: FieldRef<"feedbackForm", 'String'>
    readonly suggestions: FieldRef<"feedbackForm", 'String'>
    readonly comments: FieldRef<"feedbackForm", 'String'>
    readonly createdAt: FieldRef<"feedbackForm", 'DateTime'>
    readonly updatedAt: FieldRef<"feedbackForm", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * feedbackForm findUnique
   */
  export type feedbackFormFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the feedbackForm
     */
    select?: feedbackFormSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: feedbackFormInclude<ExtArgs> | null
    /**
     * Filter, which feedbackForm to fetch.
     */
    where: feedbackFormWhereUniqueInput
  }

  /**
   * feedbackForm findUniqueOrThrow
   */
  export type feedbackFormFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the feedbackForm
     */
    select?: feedbackFormSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: feedbackFormInclude<ExtArgs> | null
    /**
     * Filter, which feedbackForm to fetch.
     */
    where: feedbackFormWhereUniqueInput
  }

  /**
   * feedbackForm findFirst
   */
  export type feedbackFormFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the feedbackForm
     */
    select?: feedbackFormSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: feedbackFormInclude<ExtArgs> | null
    /**
     * Filter, which feedbackForm to fetch.
     */
    where?: feedbackFormWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of feedbackForms to fetch.
     */
    orderBy?: feedbackFormOrderByWithRelationInput | feedbackFormOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for feedbackForms.
     */
    cursor?: feedbackFormWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` feedbackForms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` feedbackForms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of feedbackForms.
     */
    distinct?: FeedbackFormScalarFieldEnum | FeedbackFormScalarFieldEnum[]
  }

  /**
   * feedbackForm findFirstOrThrow
   */
  export type feedbackFormFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the feedbackForm
     */
    select?: feedbackFormSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: feedbackFormInclude<ExtArgs> | null
    /**
     * Filter, which feedbackForm to fetch.
     */
    where?: feedbackFormWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of feedbackForms to fetch.
     */
    orderBy?: feedbackFormOrderByWithRelationInput | feedbackFormOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for feedbackForms.
     */
    cursor?: feedbackFormWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` feedbackForms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` feedbackForms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of feedbackForms.
     */
    distinct?: FeedbackFormScalarFieldEnum | FeedbackFormScalarFieldEnum[]
  }

  /**
   * feedbackForm findMany
   */
  export type feedbackFormFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the feedbackForm
     */
    select?: feedbackFormSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: feedbackFormInclude<ExtArgs> | null
    /**
     * Filter, which feedbackForms to fetch.
     */
    where?: feedbackFormWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of feedbackForms to fetch.
     */
    orderBy?: feedbackFormOrderByWithRelationInput | feedbackFormOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing feedbackForms.
     */
    cursor?: feedbackFormWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` feedbackForms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` feedbackForms.
     */
    skip?: number
    distinct?: FeedbackFormScalarFieldEnum | FeedbackFormScalarFieldEnum[]
  }

  /**
   * feedbackForm create
   */
  export type feedbackFormCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the feedbackForm
     */
    select?: feedbackFormSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: feedbackFormInclude<ExtArgs> | null
    /**
     * The data needed to create a feedbackForm.
     */
    data: XOR<feedbackFormCreateInput, feedbackFormUncheckedCreateInput>
  }

  /**
   * feedbackForm createMany
   */
  export type feedbackFormCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many feedbackForms.
     */
    data: feedbackFormCreateManyInput | feedbackFormCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * feedbackForm createManyAndReturn
   */
  export type feedbackFormCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the feedbackForm
     */
    select?: feedbackFormSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many feedbackForms.
     */
    data: feedbackFormCreateManyInput | feedbackFormCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * feedbackForm update
   */
  export type feedbackFormUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the feedbackForm
     */
    select?: feedbackFormSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: feedbackFormInclude<ExtArgs> | null
    /**
     * The data needed to update a feedbackForm.
     */
    data: XOR<feedbackFormUpdateInput, feedbackFormUncheckedUpdateInput>
    /**
     * Choose, which feedbackForm to update.
     */
    where: feedbackFormWhereUniqueInput
  }

  /**
   * feedbackForm updateMany
   */
  export type feedbackFormUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update feedbackForms.
     */
    data: XOR<feedbackFormUpdateManyMutationInput, feedbackFormUncheckedUpdateManyInput>
    /**
     * Filter which feedbackForms to update
     */
    where?: feedbackFormWhereInput
  }

  /**
   * feedbackForm upsert
   */
  export type feedbackFormUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the feedbackForm
     */
    select?: feedbackFormSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: feedbackFormInclude<ExtArgs> | null
    /**
     * The filter to search for the feedbackForm to update in case it exists.
     */
    where: feedbackFormWhereUniqueInput
    /**
     * In case the feedbackForm found by the `where` argument doesn't exist, create a new feedbackForm with this data.
     */
    create: XOR<feedbackFormCreateInput, feedbackFormUncheckedCreateInput>
    /**
     * In case the feedbackForm was found with the provided `where` argument, update it with this data.
     */
    update: XOR<feedbackFormUpdateInput, feedbackFormUncheckedUpdateInput>
  }

  /**
   * feedbackForm delete
   */
  export type feedbackFormDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the feedbackForm
     */
    select?: feedbackFormSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: feedbackFormInclude<ExtArgs> | null
    /**
     * Filter which feedbackForm to delete.
     */
    where: feedbackFormWhereUniqueInput
  }

  /**
   * feedbackForm deleteMany
   */
  export type feedbackFormDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which feedbackForms to delete
     */
    where?: feedbackFormWhereInput
  }

  /**
   * feedbackForm.ratings
   */
  export type feedbackForm$ratingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ratings
     */
    select?: RatingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingsInclude<ExtArgs> | null
    where?: RatingsWhereInput
  }

  /**
   * feedbackForm without action
   */
  export type feedbackFormDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the feedbackForm
     */
    select?: feedbackFormSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: feedbackFormInclude<ExtArgs> | null
  }


  /**
   * Model Visitor
   */

  export type AggregateVisitor = {
    _count: VisitorCountAggregateOutputType | null
    _avg: VisitorAvgAggregateOutputType | null
    _sum: VisitorSumAggregateOutputType | null
    _min: VisitorMinAggregateOutputType | null
    _max: VisitorMaxAggregateOutputType | null
  }

  export type VisitorAvgAggregateOutputType = {
    id: number | null
    studentSem: number | null
    numStudents: number | null
    numFaculty: number | null
  }

  export type VisitorSumAggregateOutputType = {
    id: number | null
    studentSem: number | null
    numStudents: number | null
    numFaculty: number | null
  }

  export type VisitorMinAggregateOutputType = {
    id: number | null
    institutionName: string | null
    studentBranch: string | null
    studentSem: number | null
    numStudents: number | null
    numFaculty: number | null
    name: string | null
    position: string | null
    email: string | null
    mobile: string | null
    ipr_time: string | null
    fcipt_time: string | null
    visit_date: Date | null
    visit_time: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VisitorMaxAggregateOutputType = {
    id: number | null
    institutionName: string | null
    studentBranch: string | null
    studentSem: number | null
    numStudents: number | null
    numFaculty: number | null
    name: string | null
    position: string | null
    email: string | null
    mobile: string | null
    ipr_time: string | null
    fcipt_time: string | null
    visit_date: Date | null
    visit_time: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VisitorCountAggregateOutputType = {
    id: number
    institutionName: number
    studentBranch: number
    studentSem: number
    numStudents: number
    numFaculty: number
    name: number
    position: number
    email: number
    mobile: number
    campus: number
    ipr_time: number
    fcipt_time: number
    visit_date: number
    visit_time: number
    materials: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type VisitorAvgAggregateInputType = {
    id?: true
    studentSem?: true
    numStudents?: true
    numFaculty?: true
  }

  export type VisitorSumAggregateInputType = {
    id?: true
    studentSem?: true
    numStudents?: true
    numFaculty?: true
  }

  export type VisitorMinAggregateInputType = {
    id?: true
    institutionName?: true
    studentBranch?: true
    studentSem?: true
    numStudents?: true
    numFaculty?: true
    name?: true
    position?: true
    email?: true
    mobile?: true
    ipr_time?: true
    fcipt_time?: true
    visit_date?: true
    visit_time?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VisitorMaxAggregateInputType = {
    id?: true
    institutionName?: true
    studentBranch?: true
    studentSem?: true
    numStudents?: true
    numFaculty?: true
    name?: true
    position?: true
    email?: true
    mobile?: true
    ipr_time?: true
    fcipt_time?: true
    visit_date?: true
    visit_time?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VisitorCountAggregateInputType = {
    id?: true
    institutionName?: true
    studentBranch?: true
    studentSem?: true
    numStudents?: true
    numFaculty?: true
    name?: true
    position?: true
    email?: true
    mobile?: true
    campus?: true
    ipr_time?: true
    fcipt_time?: true
    visit_date?: true
    visit_time?: true
    materials?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type VisitorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Visitor to aggregate.
     */
    where?: VisitorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Visitors to fetch.
     */
    orderBy?: VisitorOrderByWithRelationInput | VisitorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VisitorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Visitors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Visitors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Visitors
    **/
    _count?: true | VisitorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VisitorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VisitorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VisitorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VisitorMaxAggregateInputType
  }

  export type GetVisitorAggregateType<T extends VisitorAggregateArgs> = {
        [P in keyof T & keyof AggregateVisitor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVisitor[P]>
      : GetScalarType<T[P], AggregateVisitor[P]>
  }




  export type VisitorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VisitorWhereInput
    orderBy?: VisitorOrderByWithAggregationInput | VisitorOrderByWithAggregationInput[]
    by: VisitorScalarFieldEnum[] | VisitorScalarFieldEnum
    having?: VisitorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VisitorCountAggregateInputType | true
    _avg?: VisitorAvgAggregateInputType
    _sum?: VisitorSumAggregateInputType
    _min?: VisitorMinAggregateInputType
    _max?: VisitorMaxAggregateInputType
  }

  export type VisitorGroupByOutputType = {
    id: number
    institutionName: string
    studentBranch: string
    studentSem: number
    numStudents: number
    numFaculty: number
    name: string
    position: string
    email: string
    mobile: string
    campus: string[]
    ipr_time: string | null
    fcipt_time: string | null
    visit_date: Date
    visit_time: string
    materials: string[]
    createdAt: Date
    updatedAt: Date
    _count: VisitorCountAggregateOutputType | null
    _avg: VisitorAvgAggregateOutputType | null
    _sum: VisitorSumAggregateOutputType | null
    _min: VisitorMinAggregateOutputType | null
    _max: VisitorMaxAggregateOutputType | null
  }

  type GetVisitorGroupByPayload<T extends VisitorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VisitorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VisitorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VisitorGroupByOutputType[P]>
            : GetScalarType<T[P], VisitorGroupByOutputType[P]>
        }
      >
    >


  export type VisitorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    institutionName?: boolean
    studentBranch?: boolean
    studentSem?: boolean
    numStudents?: boolean
    numFaculty?: boolean
    name?: boolean
    position?: boolean
    email?: boolean
    mobile?: boolean
    campus?: boolean
    ipr_time?: boolean
    fcipt_time?: boolean
    visit_date?: boolean
    visit_time?: boolean
    materials?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["visitor"]>

  export type VisitorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    institutionName?: boolean
    studentBranch?: boolean
    studentSem?: boolean
    numStudents?: boolean
    numFaculty?: boolean
    name?: boolean
    position?: boolean
    email?: boolean
    mobile?: boolean
    campus?: boolean
    ipr_time?: boolean
    fcipt_time?: boolean
    visit_date?: boolean
    visit_time?: boolean
    materials?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["visitor"]>

  export type VisitorSelectScalar = {
    id?: boolean
    institutionName?: boolean
    studentBranch?: boolean
    studentSem?: boolean
    numStudents?: boolean
    numFaculty?: boolean
    name?: boolean
    position?: boolean
    email?: boolean
    mobile?: boolean
    campus?: boolean
    ipr_time?: boolean
    fcipt_time?: boolean
    visit_date?: boolean
    visit_time?: boolean
    materials?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $VisitorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Visitor"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      institutionName: string
      studentBranch: string
      studentSem: number
      numStudents: number
      numFaculty: number
      name: string
      position: string
      email: string
      mobile: string
      campus: string[]
      ipr_time: string | null
      fcipt_time: string | null
      visit_date: Date
      visit_time: string
      materials: string[]
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["visitor"]>
    composites: {}
  }

  type VisitorGetPayload<S extends boolean | null | undefined | VisitorDefaultArgs> = $Result.GetResult<Prisma.$VisitorPayload, S>

  type VisitorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VisitorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VisitorCountAggregateInputType | true
    }

  export interface VisitorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Visitor'], meta: { name: 'Visitor' } }
    /**
     * Find zero or one Visitor that matches the filter.
     * @param {VisitorFindUniqueArgs} args - Arguments to find a Visitor
     * @example
     * // Get one Visitor
     * const visitor = await prisma.visitor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VisitorFindUniqueArgs>(args: SelectSubset<T, VisitorFindUniqueArgs<ExtArgs>>): Prisma__VisitorClient<$Result.GetResult<Prisma.$VisitorPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Visitor that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {VisitorFindUniqueOrThrowArgs} args - Arguments to find a Visitor
     * @example
     * // Get one Visitor
     * const visitor = await prisma.visitor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VisitorFindUniqueOrThrowArgs>(args: SelectSubset<T, VisitorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VisitorClient<$Result.GetResult<Prisma.$VisitorPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Visitor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisitorFindFirstArgs} args - Arguments to find a Visitor
     * @example
     * // Get one Visitor
     * const visitor = await prisma.visitor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VisitorFindFirstArgs>(args?: SelectSubset<T, VisitorFindFirstArgs<ExtArgs>>): Prisma__VisitorClient<$Result.GetResult<Prisma.$VisitorPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Visitor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisitorFindFirstOrThrowArgs} args - Arguments to find a Visitor
     * @example
     * // Get one Visitor
     * const visitor = await prisma.visitor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VisitorFindFirstOrThrowArgs>(args?: SelectSubset<T, VisitorFindFirstOrThrowArgs<ExtArgs>>): Prisma__VisitorClient<$Result.GetResult<Prisma.$VisitorPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Visitors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisitorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Visitors
     * const visitors = await prisma.visitor.findMany()
     * 
     * // Get first 10 Visitors
     * const visitors = await prisma.visitor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const visitorWithIdOnly = await prisma.visitor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VisitorFindManyArgs>(args?: SelectSubset<T, VisitorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VisitorPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Visitor.
     * @param {VisitorCreateArgs} args - Arguments to create a Visitor.
     * @example
     * // Create one Visitor
     * const Visitor = await prisma.visitor.create({
     *   data: {
     *     // ... data to create a Visitor
     *   }
     * })
     * 
     */
    create<T extends VisitorCreateArgs>(args: SelectSubset<T, VisitorCreateArgs<ExtArgs>>): Prisma__VisitorClient<$Result.GetResult<Prisma.$VisitorPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Visitors.
     * @param {VisitorCreateManyArgs} args - Arguments to create many Visitors.
     * @example
     * // Create many Visitors
     * const visitor = await prisma.visitor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VisitorCreateManyArgs>(args?: SelectSubset<T, VisitorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Visitors and returns the data saved in the database.
     * @param {VisitorCreateManyAndReturnArgs} args - Arguments to create many Visitors.
     * @example
     * // Create many Visitors
     * const visitor = await prisma.visitor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Visitors and only return the `id`
     * const visitorWithIdOnly = await prisma.visitor.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VisitorCreateManyAndReturnArgs>(args?: SelectSubset<T, VisitorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VisitorPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Visitor.
     * @param {VisitorDeleteArgs} args - Arguments to delete one Visitor.
     * @example
     * // Delete one Visitor
     * const Visitor = await prisma.visitor.delete({
     *   where: {
     *     // ... filter to delete one Visitor
     *   }
     * })
     * 
     */
    delete<T extends VisitorDeleteArgs>(args: SelectSubset<T, VisitorDeleteArgs<ExtArgs>>): Prisma__VisitorClient<$Result.GetResult<Prisma.$VisitorPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Visitor.
     * @param {VisitorUpdateArgs} args - Arguments to update one Visitor.
     * @example
     * // Update one Visitor
     * const visitor = await prisma.visitor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VisitorUpdateArgs>(args: SelectSubset<T, VisitorUpdateArgs<ExtArgs>>): Prisma__VisitorClient<$Result.GetResult<Prisma.$VisitorPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Visitors.
     * @param {VisitorDeleteManyArgs} args - Arguments to filter Visitors to delete.
     * @example
     * // Delete a few Visitors
     * const { count } = await prisma.visitor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VisitorDeleteManyArgs>(args?: SelectSubset<T, VisitorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Visitors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisitorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Visitors
     * const visitor = await prisma.visitor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VisitorUpdateManyArgs>(args: SelectSubset<T, VisitorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Visitor.
     * @param {VisitorUpsertArgs} args - Arguments to update or create a Visitor.
     * @example
     * // Update or create a Visitor
     * const visitor = await prisma.visitor.upsert({
     *   create: {
     *     // ... data to create a Visitor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Visitor we want to update
     *   }
     * })
     */
    upsert<T extends VisitorUpsertArgs>(args: SelectSubset<T, VisitorUpsertArgs<ExtArgs>>): Prisma__VisitorClient<$Result.GetResult<Prisma.$VisitorPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Visitors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisitorCountArgs} args - Arguments to filter Visitors to count.
     * @example
     * // Count the number of Visitors
     * const count = await prisma.visitor.count({
     *   where: {
     *     // ... the filter for the Visitors we want to count
     *   }
     * })
    **/
    count<T extends VisitorCountArgs>(
      args?: Subset<T, VisitorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VisitorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Visitor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisitorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VisitorAggregateArgs>(args: Subset<T, VisitorAggregateArgs>): Prisma.PrismaPromise<GetVisitorAggregateType<T>>

    /**
     * Group by Visitor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisitorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VisitorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VisitorGroupByArgs['orderBy'] }
        : { orderBy?: VisitorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VisitorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVisitorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Visitor model
   */
  readonly fields: VisitorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Visitor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VisitorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Visitor model
   */ 
  interface VisitorFieldRefs {
    readonly id: FieldRef<"Visitor", 'Int'>
    readonly institutionName: FieldRef<"Visitor", 'String'>
    readonly studentBranch: FieldRef<"Visitor", 'String'>
    readonly studentSem: FieldRef<"Visitor", 'Int'>
    readonly numStudents: FieldRef<"Visitor", 'Int'>
    readonly numFaculty: FieldRef<"Visitor", 'Int'>
    readonly name: FieldRef<"Visitor", 'String'>
    readonly position: FieldRef<"Visitor", 'String'>
    readonly email: FieldRef<"Visitor", 'String'>
    readonly mobile: FieldRef<"Visitor", 'String'>
    readonly campus: FieldRef<"Visitor", 'String[]'>
    readonly ipr_time: FieldRef<"Visitor", 'String'>
    readonly fcipt_time: FieldRef<"Visitor", 'String'>
    readonly visit_date: FieldRef<"Visitor", 'DateTime'>
    readonly visit_time: FieldRef<"Visitor", 'String'>
    readonly materials: FieldRef<"Visitor", 'String[]'>
    readonly createdAt: FieldRef<"Visitor", 'DateTime'>
    readonly updatedAt: FieldRef<"Visitor", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Visitor findUnique
   */
  export type VisitorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Visitor
     */
    select?: VisitorSelect<ExtArgs> | null
    /**
     * Filter, which Visitor to fetch.
     */
    where: VisitorWhereUniqueInput
  }

  /**
   * Visitor findUniqueOrThrow
   */
  export type VisitorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Visitor
     */
    select?: VisitorSelect<ExtArgs> | null
    /**
     * Filter, which Visitor to fetch.
     */
    where: VisitorWhereUniqueInput
  }

  /**
   * Visitor findFirst
   */
  export type VisitorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Visitor
     */
    select?: VisitorSelect<ExtArgs> | null
    /**
     * Filter, which Visitor to fetch.
     */
    where?: VisitorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Visitors to fetch.
     */
    orderBy?: VisitorOrderByWithRelationInput | VisitorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Visitors.
     */
    cursor?: VisitorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Visitors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Visitors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Visitors.
     */
    distinct?: VisitorScalarFieldEnum | VisitorScalarFieldEnum[]
  }

  /**
   * Visitor findFirstOrThrow
   */
  export type VisitorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Visitor
     */
    select?: VisitorSelect<ExtArgs> | null
    /**
     * Filter, which Visitor to fetch.
     */
    where?: VisitorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Visitors to fetch.
     */
    orderBy?: VisitorOrderByWithRelationInput | VisitorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Visitors.
     */
    cursor?: VisitorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Visitors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Visitors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Visitors.
     */
    distinct?: VisitorScalarFieldEnum | VisitorScalarFieldEnum[]
  }

  /**
   * Visitor findMany
   */
  export type VisitorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Visitor
     */
    select?: VisitorSelect<ExtArgs> | null
    /**
     * Filter, which Visitors to fetch.
     */
    where?: VisitorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Visitors to fetch.
     */
    orderBy?: VisitorOrderByWithRelationInput | VisitorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Visitors.
     */
    cursor?: VisitorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Visitors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Visitors.
     */
    skip?: number
    distinct?: VisitorScalarFieldEnum | VisitorScalarFieldEnum[]
  }

  /**
   * Visitor create
   */
  export type VisitorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Visitor
     */
    select?: VisitorSelect<ExtArgs> | null
    /**
     * The data needed to create a Visitor.
     */
    data: XOR<VisitorCreateInput, VisitorUncheckedCreateInput>
  }

  /**
   * Visitor createMany
   */
  export type VisitorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Visitors.
     */
    data: VisitorCreateManyInput | VisitorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Visitor createManyAndReturn
   */
  export type VisitorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Visitor
     */
    select?: VisitorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Visitors.
     */
    data: VisitorCreateManyInput | VisitorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Visitor update
   */
  export type VisitorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Visitor
     */
    select?: VisitorSelect<ExtArgs> | null
    /**
     * The data needed to update a Visitor.
     */
    data: XOR<VisitorUpdateInput, VisitorUncheckedUpdateInput>
    /**
     * Choose, which Visitor to update.
     */
    where: VisitorWhereUniqueInput
  }

  /**
   * Visitor updateMany
   */
  export type VisitorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Visitors.
     */
    data: XOR<VisitorUpdateManyMutationInput, VisitorUncheckedUpdateManyInput>
    /**
     * Filter which Visitors to update
     */
    where?: VisitorWhereInput
  }

  /**
   * Visitor upsert
   */
  export type VisitorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Visitor
     */
    select?: VisitorSelect<ExtArgs> | null
    /**
     * The filter to search for the Visitor to update in case it exists.
     */
    where: VisitorWhereUniqueInput
    /**
     * In case the Visitor found by the `where` argument doesn't exist, create a new Visitor with this data.
     */
    create: XOR<VisitorCreateInput, VisitorUncheckedCreateInput>
    /**
     * In case the Visitor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VisitorUpdateInput, VisitorUncheckedUpdateInput>
  }

  /**
   * Visitor delete
   */
  export type VisitorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Visitor
     */
    select?: VisitorSelect<ExtArgs> | null
    /**
     * Filter which Visitor to delete.
     */
    where: VisitorWhereUniqueInput
  }

  /**
   * Visitor deleteMany
   */
  export type VisitorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Visitors to delete
     */
    where?: VisitorWhereInput
  }

  /**
   * Visitor without action
   */
  export type VisitorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Visitor
     */
    select?: VisitorSelect<ExtArgs> | null
  }


  /**
   * Model IPRExhibitionForm
   */

  export type AggregateIPRExhibitionForm = {
    _count: IPRExhibitionFormCountAggregateOutputType | null
    _avg: IPRExhibitionFormAvgAggregateOutputType | null
    _sum: IPRExhibitionFormSumAggregateOutputType | null
    _min: IPRExhibitionFormMinAggregateOutputType | null
    _max: IPRExhibitionFormMaxAggregateOutputType | null
  }

  export type IPRExhibitionFormAvgAggregateOutputType = {
    id: number | null
    powerOutlets: number | null
    numTables: number | null
    seatingCapacity: number | null
    teacherInvitation: number | null
    teacherRegistration: number | null
  }

  export type IPRExhibitionFormSumAggregateOutputType = {
    id: number | null
    powerOutlets: number | null
    numTables: number | null
    seatingCapacity: number | null
    teacherInvitation: number | null
    teacherRegistration: number | null
  }

  export type IPRExhibitionFormMinAggregateOutputType = {
    id: number | null
    hallDimension: string | null
    isEnclosedHall: string | null
    canBeDarkened: string | null
    hasCooling: string | null
    isGroundFloor: string | null
    hasStorageSpace: string | null
    powerOutlets: number | null
    numTables: number | null
    vrSpace: string | null
    hasWifi: string | null
    lectureHallArea: string | null
    seatingCapacity: number | null
    hasAVFacilities: string | null
    distanceFromExhibition: string | null
    accommodationProvided: string | null
    localTransportation: string | null
    secureParkingSpace: string | null
    manpowerForLoading: string | null
    contactPersonName: string | null
    contactPersonMobile: string | null
    contactPersonEmail: string | null
    venueLocation: string | null
    teacherInvitation: number | null
    teacherRegistration: number | null
    providesWritingMaterials: string | null
    providesRefreshments: string | null
    quizForSchoolStudents: string | null
    quizTeamSelection: string | null
    quizArrangements: string | null
    quizRefreshments: string | null
  }

  export type IPRExhibitionFormMaxAggregateOutputType = {
    id: number | null
    hallDimension: string | null
    isEnclosedHall: string | null
    canBeDarkened: string | null
    hasCooling: string | null
    isGroundFloor: string | null
    hasStorageSpace: string | null
    powerOutlets: number | null
    numTables: number | null
    vrSpace: string | null
    hasWifi: string | null
    lectureHallArea: string | null
    seatingCapacity: number | null
    hasAVFacilities: string | null
    distanceFromExhibition: string | null
    accommodationProvided: string | null
    localTransportation: string | null
    secureParkingSpace: string | null
    manpowerForLoading: string | null
    contactPersonName: string | null
    contactPersonMobile: string | null
    contactPersonEmail: string | null
    venueLocation: string | null
    teacherInvitation: number | null
    teacherRegistration: number | null
    providesWritingMaterials: string | null
    providesRefreshments: string | null
    quizForSchoolStudents: string | null
    quizTeamSelection: string | null
    quizArrangements: string | null
    quizRefreshments: string | null
  }

  export type IPRExhibitionFormCountAggregateOutputType = {
    id: number
    hallDimension: number
    isEnclosedHall: number
    canBeDarkened: number
    hasCooling: number
    isGroundFloor: number
    hasStorageSpace: number
    powerOutlets: number
    numTables: number
    vrSpace: number
    hasWifi: number
    lectureHallArea: number
    seatingCapacity: number
    hasAVFacilities: number
    distanceFromExhibition: number
    accommodationProvided: number
    localTransportation: number
    secureParkingSpace: number
    manpowerForLoading: number
    contactPersonName: number
    contactPersonMobile: number
    contactPersonEmail: number
    venueLocation: number
    teacherInvitation: number
    teacherRegistration: number
    providesWritingMaterials: number
    providesRefreshments: number
    quizForSchoolStudents: number
    quizTeamSelection: number
    quizArrangements: number
    quizRefreshments: number
    _all: number
  }


  export type IPRExhibitionFormAvgAggregateInputType = {
    id?: true
    powerOutlets?: true
    numTables?: true
    seatingCapacity?: true
    teacherInvitation?: true
    teacherRegistration?: true
  }

  export type IPRExhibitionFormSumAggregateInputType = {
    id?: true
    powerOutlets?: true
    numTables?: true
    seatingCapacity?: true
    teacherInvitation?: true
    teacherRegistration?: true
  }

  export type IPRExhibitionFormMinAggregateInputType = {
    id?: true
    hallDimension?: true
    isEnclosedHall?: true
    canBeDarkened?: true
    hasCooling?: true
    isGroundFloor?: true
    hasStorageSpace?: true
    powerOutlets?: true
    numTables?: true
    vrSpace?: true
    hasWifi?: true
    lectureHallArea?: true
    seatingCapacity?: true
    hasAVFacilities?: true
    distanceFromExhibition?: true
    accommodationProvided?: true
    localTransportation?: true
    secureParkingSpace?: true
    manpowerForLoading?: true
    contactPersonName?: true
    contactPersonMobile?: true
    contactPersonEmail?: true
    venueLocation?: true
    teacherInvitation?: true
    teacherRegistration?: true
    providesWritingMaterials?: true
    providesRefreshments?: true
    quizForSchoolStudents?: true
    quizTeamSelection?: true
    quizArrangements?: true
    quizRefreshments?: true
  }

  export type IPRExhibitionFormMaxAggregateInputType = {
    id?: true
    hallDimension?: true
    isEnclosedHall?: true
    canBeDarkened?: true
    hasCooling?: true
    isGroundFloor?: true
    hasStorageSpace?: true
    powerOutlets?: true
    numTables?: true
    vrSpace?: true
    hasWifi?: true
    lectureHallArea?: true
    seatingCapacity?: true
    hasAVFacilities?: true
    distanceFromExhibition?: true
    accommodationProvided?: true
    localTransportation?: true
    secureParkingSpace?: true
    manpowerForLoading?: true
    contactPersonName?: true
    contactPersonMobile?: true
    contactPersonEmail?: true
    venueLocation?: true
    teacherInvitation?: true
    teacherRegistration?: true
    providesWritingMaterials?: true
    providesRefreshments?: true
    quizForSchoolStudents?: true
    quizTeamSelection?: true
    quizArrangements?: true
    quizRefreshments?: true
  }

  export type IPRExhibitionFormCountAggregateInputType = {
    id?: true
    hallDimension?: true
    isEnclosedHall?: true
    canBeDarkened?: true
    hasCooling?: true
    isGroundFloor?: true
    hasStorageSpace?: true
    powerOutlets?: true
    numTables?: true
    vrSpace?: true
    hasWifi?: true
    lectureHallArea?: true
    seatingCapacity?: true
    hasAVFacilities?: true
    distanceFromExhibition?: true
    accommodationProvided?: true
    localTransportation?: true
    secureParkingSpace?: true
    manpowerForLoading?: true
    contactPersonName?: true
    contactPersonMobile?: true
    contactPersonEmail?: true
    venueLocation?: true
    teacherInvitation?: true
    teacherRegistration?: true
    providesWritingMaterials?: true
    providesRefreshments?: true
    quizForSchoolStudents?: true
    quizTeamSelection?: true
    quizArrangements?: true
    quizRefreshments?: true
    _all?: true
  }

  export type IPRExhibitionFormAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which IPRExhibitionForm to aggregate.
     */
    where?: IPRExhibitionFormWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IPRExhibitionForms to fetch.
     */
    orderBy?: IPRExhibitionFormOrderByWithRelationInput | IPRExhibitionFormOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: IPRExhibitionFormWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IPRExhibitionForms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IPRExhibitionForms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned IPRExhibitionForms
    **/
    _count?: true | IPRExhibitionFormCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: IPRExhibitionFormAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: IPRExhibitionFormSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IPRExhibitionFormMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IPRExhibitionFormMaxAggregateInputType
  }

  export type GetIPRExhibitionFormAggregateType<T extends IPRExhibitionFormAggregateArgs> = {
        [P in keyof T & keyof AggregateIPRExhibitionForm]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIPRExhibitionForm[P]>
      : GetScalarType<T[P], AggregateIPRExhibitionForm[P]>
  }




  export type IPRExhibitionFormGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IPRExhibitionFormWhereInput
    orderBy?: IPRExhibitionFormOrderByWithAggregationInput | IPRExhibitionFormOrderByWithAggregationInput[]
    by: IPRExhibitionFormScalarFieldEnum[] | IPRExhibitionFormScalarFieldEnum
    having?: IPRExhibitionFormScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IPRExhibitionFormCountAggregateInputType | true
    _avg?: IPRExhibitionFormAvgAggregateInputType
    _sum?: IPRExhibitionFormSumAggregateInputType
    _min?: IPRExhibitionFormMinAggregateInputType
    _max?: IPRExhibitionFormMaxAggregateInputType
  }

  export type IPRExhibitionFormGroupByOutputType = {
    id: number
    hallDimension: string
    isEnclosedHall: string
    canBeDarkened: string
    hasCooling: string | null
    isGroundFloor: string
    hasStorageSpace: string | null
    powerOutlets: number
    numTables: number | null
    vrSpace: string | null
    hasWifi: string | null
    lectureHallArea: string
    seatingCapacity: number
    hasAVFacilities: string | null
    distanceFromExhibition: string | null
    accommodationProvided: string | null
    localTransportation: string | null
    secureParkingSpace: string | null
    manpowerForLoading: string | null
    contactPersonName: string
    contactPersonMobile: string
    contactPersonEmail: string
    venueLocation: string
    teacherInvitation: number
    teacherRegistration: number
    providesWritingMaterials: string | null
    providesRefreshments: string | null
    quizForSchoolStudents: string | null
    quizTeamSelection: string | null
    quizArrangements: string | null
    quizRefreshments: string | null
    _count: IPRExhibitionFormCountAggregateOutputType | null
    _avg: IPRExhibitionFormAvgAggregateOutputType | null
    _sum: IPRExhibitionFormSumAggregateOutputType | null
    _min: IPRExhibitionFormMinAggregateOutputType | null
    _max: IPRExhibitionFormMaxAggregateOutputType | null
  }

  type GetIPRExhibitionFormGroupByPayload<T extends IPRExhibitionFormGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<IPRExhibitionFormGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IPRExhibitionFormGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IPRExhibitionFormGroupByOutputType[P]>
            : GetScalarType<T[P], IPRExhibitionFormGroupByOutputType[P]>
        }
      >
    >


  export type IPRExhibitionFormSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hallDimension?: boolean
    isEnclosedHall?: boolean
    canBeDarkened?: boolean
    hasCooling?: boolean
    isGroundFloor?: boolean
    hasStorageSpace?: boolean
    powerOutlets?: boolean
    numTables?: boolean
    vrSpace?: boolean
    hasWifi?: boolean
    lectureHallArea?: boolean
    seatingCapacity?: boolean
    hasAVFacilities?: boolean
    distanceFromExhibition?: boolean
    accommodationProvided?: boolean
    localTransportation?: boolean
    secureParkingSpace?: boolean
    manpowerForLoading?: boolean
    contactPersonName?: boolean
    contactPersonMobile?: boolean
    contactPersonEmail?: boolean
    venueLocation?: boolean
    teacherInvitation?: boolean
    teacherRegistration?: boolean
    providesWritingMaterials?: boolean
    providesRefreshments?: boolean
    quizForSchoolStudents?: boolean
    quizTeamSelection?: boolean
    quizArrangements?: boolean
    quizRefreshments?: boolean
  }, ExtArgs["result"]["iPRExhibitionForm"]>

  export type IPRExhibitionFormSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    hallDimension?: boolean
    isEnclosedHall?: boolean
    canBeDarkened?: boolean
    hasCooling?: boolean
    isGroundFloor?: boolean
    hasStorageSpace?: boolean
    powerOutlets?: boolean
    numTables?: boolean
    vrSpace?: boolean
    hasWifi?: boolean
    lectureHallArea?: boolean
    seatingCapacity?: boolean
    hasAVFacilities?: boolean
    distanceFromExhibition?: boolean
    accommodationProvided?: boolean
    localTransportation?: boolean
    secureParkingSpace?: boolean
    manpowerForLoading?: boolean
    contactPersonName?: boolean
    contactPersonMobile?: boolean
    contactPersonEmail?: boolean
    venueLocation?: boolean
    teacherInvitation?: boolean
    teacherRegistration?: boolean
    providesWritingMaterials?: boolean
    providesRefreshments?: boolean
    quizForSchoolStudents?: boolean
    quizTeamSelection?: boolean
    quizArrangements?: boolean
    quizRefreshments?: boolean
  }, ExtArgs["result"]["iPRExhibitionForm"]>

  export type IPRExhibitionFormSelectScalar = {
    id?: boolean
    hallDimension?: boolean
    isEnclosedHall?: boolean
    canBeDarkened?: boolean
    hasCooling?: boolean
    isGroundFloor?: boolean
    hasStorageSpace?: boolean
    powerOutlets?: boolean
    numTables?: boolean
    vrSpace?: boolean
    hasWifi?: boolean
    lectureHallArea?: boolean
    seatingCapacity?: boolean
    hasAVFacilities?: boolean
    distanceFromExhibition?: boolean
    accommodationProvided?: boolean
    localTransportation?: boolean
    secureParkingSpace?: boolean
    manpowerForLoading?: boolean
    contactPersonName?: boolean
    contactPersonMobile?: boolean
    contactPersonEmail?: boolean
    venueLocation?: boolean
    teacherInvitation?: boolean
    teacherRegistration?: boolean
    providesWritingMaterials?: boolean
    providesRefreshments?: boolean
    quizForSchoolStudents?: boolean
    quizTeamSelection?: boolean
    quizArrangements?: boolean
    quizRefreshments?: boolean
  }


  export type $IPRExhibitionFormPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "IPRExhibitionForm"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      hallDimension: string
      isEnclosedHall: string
      canBeDarkened: string
      hasCooling: string | null
      isGroundFloor: string
      hasStorageSpace: string | null
      powerOutlets: number
      numTables: number | null
      vrSpace: string | null
      hasWifi: string | null
      lectureHallArea: string
      seatingCapacity: number
      hasAVFacilities: string | null
      distanceFromExhibition: string | null
      accommodationProvided: string | null
      localTransportation: string | null
      secureParkingSpace: string | null
      manpowerForLoading: string | null
      contactPersonName: string
      contactPersonMobile: string
      contactPersonEmail: string
      venueLocation: string
      teacherInvitation: number
      teacherRegistration: number
      providesWritingMaterials: string | null
      providesRefreshments: string | null
      quizForSchoolStudents: string | null
      quizTeamSelection: string | null
      quizArrangements: string | null
      quizRefreshments: string | null
    }, ExtArgs["result"]["iPRExhibitionForm"]>
    composites: {}
  }

  type IPRExhibitionFormGetPayload<S extends boolean | null | undefined | IPRExhibitionFormDefaultArgs> = $Result.GetResult<Prisma.$IPRExhibitionFormPayload, S>

  type IPRExhibitionFormCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<IPRExhibitionFormFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: IPRExhibitionFormCountAggregateInputType | true
    }

  export interface IPRExhibitionFormDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['IPRExhibitionForm'], meta: { name: 'IPRExhibitionForm' } }
    /**
     * Find zero or one IPRExhibitionForm that matches the filter.
     * @param {IPRExhibitionFormFindUniqueArgs} args - Arguments to find a IPRExhibitionForm
     * @example
     * // Get one IPRExhibitionForm
     * const iPRExhibitionForm = await prisma.iPRExhibitionForm.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends IPRExhibitionFormFindUniqueArgs>(args: SelectSubset<T, IPRExhibitionFormFindUniqueArgs<ExtArgs>>): Prisma__IPRExhibitionFormClient<$Result.GetResult<Prisma.$IPRExhibitionFormPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one IPRExhibitionForm that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {IPRExhibitionFormFindUniqueOrThrowArgs} args - Arguments to find a IPRExhibitionForm
     * @example
     * // Get one IPRExhibitionForm
     * const iPRExhibitionForm = await prisma.iPRExhibitionForm.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends IPRExhibitionFormFindUniqueOrThrowArgs>(args: SelectSubset<T, IPRExhibitionFormFindUniqueOrThrowArgs<ExtArgs>>): Prisma__IPRExhibitionFormClient<$Result.GetResult<Prisma.$IPRExhibitionFormPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first IPRExhibitionForm that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IPRExhibitionFormFindFirstArgs} args - Arguments to find a IPRExhibitionForm
     * @example
     * // Get one IPRExhibitionForm
     * const iPRExhibitionForm = await prisma.iPRExhibitionForm.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends IPRExhibitionFormFindFirstArgs>(args?: SelectSubset<T, IPRExhibitionFormFindFirstArgs<ExtArgs>>): Prisma__IPRExhibitionFormClient<$Result.GetResult<Prisma.$IPRExhibitionFormPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first IPRExhibitionForm that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IPRExhibitionFormFindFirstOrThrowArgs} args - Arguments to find a IPRExhibitionForm
     * @example
     * // Get one IPRExhibitionForm
     * const iPRExhibitionForm = await prisma.iPRExhibitionForm.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends IPRExhibitionFormFindFirstOrThrowArgs>(args?: SelectSubset<T, IPRExhibitionFormFindFirstOrThrowArgs<ExtArgs>>): Prisma__IPRExhibitionFormClient<$Result.GetResult<Prisma.$IPRExhibitionFormPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more IPRExhibitionForms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IPRExhibitionFormFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all IPRExhibitionForms
     * const iPRExhibitionForms = await prisma.iPRExhibitionForm.findMany()
     * 
     * // Get first 10 IPRExhibitionForms
     * const iPRExhibitionForms = await prisma.iPRExhibitionForm.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const iPRExhibitionFormWithIdOnly = await prisma.iPRExhibitionForm.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends IPRExhibitionFormFindManyArgs>(args?: SelectSubset<T, IPRExhibitionFormFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IPRExhibitionFormPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a IPRExhibitionForm.
     * @param {IPRExhibitionFormCreateArgs} args - Arguments to create a IPRExhibitionForm.
     * @example
     * // Create one IPRExhibitionForm
     * const IPRExhibitionForm = await prisma.iPRExhibitionForm.create({
     *   data: {
     *     // ... data to create a IPRExhibitionForm
     *   }
     * })
     * 
     */
    create<T extends IPRExhibitionFormCreateArgs>(args: SelectSubset<T, IPRExhibitionFormCreateArgs<ExtArgs>>): Prisma__IPRExhibitionFormClient<$Result.GetResult<Prisma.$IPRExhibitionFormPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many IPRExhibitionForms.
     * @param {IPRExhibitionFormCreateManyArgs} args - Arguments to create many IPRExhibitionForms.
     * @example
     * // Create many IPRExhibitionForms
     * const iPRExhibitionForm = await prisma.iPRExhibitionForm.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends IPRExhibitionFormCreateManyArgs>(args?: SelectSubset<T, IPRExhibitionFormCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many IPRExhibitionForms and returns the data saved in the database.
     * @param {IPRExhibitionFormCreateManyAndReturnArgs} args - Arguments to create many IPRExhibitionForms.
     * @example
     * // Create many IPRExhibitionForms
     * const iPRExhibitionForm = await prisma.iPRExhibitionForm.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many IPRExhibitionForms and only return the `id`
     * const iPRExhibitionFormWithIdOnly = await prisma.iPRExhibitionForm.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends IPRExhibitionFormCreateManyAndReturnArgs>(args?: SelectSubset<T, IPRExhibitionFormCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IPRExhibitionFormPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a IPRExhibitionForm.
     * @param {IPRExhibitionFormDeleteArgs} args - Arguments to delete one IPRExhibitionForm.
     * @example
     * // Delete one IPRExhibitionForm
     * const IPRExhibitionForm = await prisma.iPRExhibitionForm.delete({
     *   where: {
     *     // ... filter to delete one IPRExhibitionForm
     *   }
     * })
     * 
     */
    delete<T extends IPRExhibitionFormDeleteArgs>(args: SelectSubset<T, IPRExhibitionFormDeleteArgs<ExtArgs>>): Prisma__IPRExhibitionFormClient<$Result.GetResult<Prisma.$IPRExhibitionFormPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one IPRExhibitionForm.
     * @param {IPRExhibitionFormUpdateArgs} args - Arguments to update one IPRExhibitionForm.
     * @example
     * // Update one IPRExhibitionForm
     * const iPRExhibitionForm = await prisma.iPRExhibitionForm.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends IPRExhibitionFormUpdateArgs>(args: SelectSubset<T, IPRExhibitionFormUpdateArgs<ExtArgs>>): Prisma__IPRExhibitionFormClient<$Result.GetResult<Prisma.$IPRExhibitionFormPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more IPRExhibitionForms.
     * @param {IPRExhibitionFormDeleteManyArgs} args - Arguments to filter IPRExhibitionForms to delete.
     * @example
     * // Delete a few IPRExhibitionForms
     * const { count } = await prisma.iPRExhibitionForm.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends IPRExhibitionFormDeleteManyArgs>(args?: SelectSubset<T, IPRExhibitionFormDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more IPRExhibitionForms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IPRExhibitionFormUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many IPRExhibitionForms
     * const iPRExhibitionForm = await prisma.iPRExhibitionForm.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends IPRExhibitionFormUpdateManyArgs>(args: SelectSubset<T, IPRExhibitionFormUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one IPRExhibitionForm.
     * @param {IPRExhibitionFormUpsertArgs} args - Arguments to update or create a IPRExhibitionForm.
     * @example
     * // Update or create a IPRExhibitionForm
     * const iPRExhibitionForm = await prisma.iPRExhibitionForm.upsert({
     *   create: {
     *     // ... data to create a IPRExhibitionForm
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the IPRExhibitionForm we want to update
     *   }
     * })
     */
    upsert<T extends IPRExhibitionFormUpsertArgs>(args: SelectSubset<T, IPRExhibitionFormUpsertArgs<ExtArgs>>): Prisma__IPRExhibitionFormClient<$Result.GetResult<Prisma.$IPRExhibitionFormPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of IPRExhibitionForms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IPRExhibitionFormCountArgs} args - Arguments to filter IPRExhibitionForms to count.
     * @example
     * // Count the number of IPRExhibitionForms
     * const count = await prisma.iPRExhibitionForm.count({
     *   where: {
     *     // ... the filter for the IPRExhibitionForms we want to count
     *   }
     * })
    **/
    count<T extends IPRExhibitionFormCountArgs>(
      args?: Subset<T, IPRExhibitionFormCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IPRExhibitionFormCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a IPRExhibitionForm.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IPRExhibitionFormAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IPRExhibitionFormAggregateArgs>(args: Subset<T, IPRExhibitionFormAggregateArgs>): Prisma.PrismaPromise<GetIPRExhibitionFormAggregateType<T>>

    /**
     * Group by IPRExhibitionForm.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IPRExhibitionFormGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IPRExhibitionFormGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IPRExhibitionFormGroupByArgs['orderBy'] }
        : { orderBy?: IPRExhibitionFormGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IPRExhibitionFormGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIPRExhibitionFormGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the IPRExhibitionForm model
   */
  readonly fields: IPRExhibitionFormFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for IPRExhibitionForm.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__IPRExhibitionFormClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the IPRExhibitionForm model
   */ 
  interface IPRExhibitionFormFieldRefs {
    readonly id: FieldRef<"IPRExhibitionForm", 'Int'>
    readonly hallDimension: FieldRef<"IPRExhibitionForm", 'String'>
    readonly isEnclosedHall: FieldRef<"IPRExhibitionForm", 'String'>
    readonly canBeDarkened: FieldRef<"IPRExhibitionForm", 'String'>
    readonly hasCooling: FieldRef<"IPRExhibitionForm", 'String'>
    readonly isGroundFloor: FieldRef<"IPRExhibitionForm", 'String'>
    readonly hasStorageSpace: FieldRef<"IPRExhibitionForm", 'String'>
    readonly powerOutlets: FieldRef<"IPRExhibitionForm", 'Int'>
    readonly numTables: FieldRef<"IPRExhibitionForm", 'Int'>
    readonly vrSpace: FieldRef<"IPRExhibitionForm", 'String'>
    readonly hasWifi: FieldRef<"IPRExhibitionForm", 'String'>
    readonly lectureHallArea: FieldRef<"IPRExhibitionForm", 'String'>
    readonly seatingCapacity: FieldRef<"IPRExhibitionForm", 'Int'>
    readonly hasAVFacilities: FieldRef<"IPRExhibitionForm", 'String'>
    readonly distanceFromExhibition: FieldRef<"IPRExhibitionForm", 'String'>
    readonly accommodationProvided: FieldRef<"IPRExhibitionForm", 'String'>
    readonly localTransportation: FieldRef<"IPRExhibitionForm", 'String'>
    readonly secureParkingSpace: FieldRef<"IPRExhibitionForm", 'String'>
    readonly manpowerForLoading: FieldRef<"IPRExhibitionForm", 'String'>
    readonly contactPersonName: FieldRef<"IPRExhibitionForm", 'String'>
    readonly contactPersonMobile: FieldRef<"IPRExhibitionForm", 'String'>
    readonly contactPersonEmail: FieldRef<"IPRExhibitionForm", 'String'>
    readonly venueLocation: FieldRef<"IPRExhibitionForm", 'String'>
    readonly teacherInvitation: FieldRef<"IPRExhibitionForm", 'Int'>
    readonly teacherRegistration: FieldRef<"IPRExhibitionForm", 'Int'>
    readonly providesWritingMaterials: FieldRef<"IPRExhibitionForm", 'String'>
    readonly providesRefreshments: FieldRef<"IPRExhibitionForm", 'String'>
    readonly quizForSchoolStudents: FieldRef<"IPRExhibitionForm", 'String'>
    readonly quizTeamSelection: FieldRef<"IPRExhibitionForm", 'String'>
    readonly quizArrangements: FieldRef<"IPRExhibitionForm", 'String'>
    readonly quizRefreshments: FieldRef<"IPRExhibitionForm", 'String'>
  }
    

  // Custom InputTypes
  /**
   * IPRExhibitionForm findUnique
   */
  export type IPRExhibitionFormFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IPRExhibitionForm
     */
    select?: IPRExhibitionFormSelect<ExtArgs> | null
    /**
     * Filter, which IPRExhibitionForm to fetch.
     */
    where: IPRExhibitionFormWhereUniqueInput
  }

  /**
   * IPRExhibitionForm findUniqueOrThrow
   */
  export type IPRExhibitionFormFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IPRExhibitionForm
     */
    select?: IPRExhibitionFormSelect<ExtArgs> | null
    /**
     * Filter, which IPRExhibitionForm to fetch.
     */
    where: IPRExhibitionFormWhereUniqueInput
  }

  /**
   * IPRExhibitionForm findFirst
   */
  export type IPRExhibitionFormFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IPRExhibitionForm
     */
    select?: IPRExhibitionFormSelect<ExtArgs> | null
    /**
     * Filter, which IPRExhibitionForm to fetch.
     */
    where?: IPRExhibitionFormWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IPRExhibitionForms to fetch.
     */
    orderBy?: IPRExhibitionFormOrderByWithRelationInput | IPRExhibitionFormOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for IPRExhibitionForms.
     */
    cursor?: IPRExhibitionFormWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IPRExhibitionForms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IPRExhibitionForms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of IPRExhibitionForms.
     */
    distinct?: IPRExhibitionFormScalarFieldEnum | IPRExhibitionFormScalarFieldEnum[]
  }

  /**
   * IPRExhibitionForm findFirstOrThrow
   */
  export type IPRExhibitionFormFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IPRExhibitionForm
     */
    select?: IPRExhibitionFormSelect<ExtArgs> | null
    /**
     * Filter, which IPRExhibitionForm to fetch.
     */
    where?: IPRExhibitionFormWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IPRExhibitionForms to fetch.
     */
    orderBy?: IPRExhibitionFormOrderByWithRelationInput | IPRExhibitionFormOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for IPRExhibitionForms.
     */
    cursor?: IPRExhibitionFormWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IPRExhibitionForms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IPRExhibitionForms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of IPRExhibitionForms.
     */
    distinct?: IPRExhibitionFormScalarFieldEnum | IPRExhibitionFormScalarFieldEnum[]
  }

  /**
   * IPRExhibitionForm findMany
   */
  export type IPRExhibitionFormFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IPRExhibitionForm
     */
    select?: IPRExhibitionFormSelect<ExtArgs> | null
    /**
     * Filter, which IPRExhibitionForms to fetch.
     */
    where?: IPRExhibitionFormWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IPRExhibitionForms to fetch.
     */
    orderBy?: IPRExhibitionFormOrderByWithRelationInput | IPRExhibitionFormOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing IPRExhibitionForms.
     */
    cursor?: IPRExhibitionFormWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IPRExhibitionForms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IPRExhibitionForms.
     */
    skip?: number
    distinct?: IPRExhibitionFormScalarFieldEnum | IPRExhibitionFormScalarFieldEnum[]
  }

  /**
   * IPRExhibitionForm create
   */
  export type IPRExhibitionFormCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IPRExhibitionForm
     */
    select?: IPRExhibitionFormSelect<ExtArgs> | null
    /**
     * The data needed to create a IPRExhibitionForm.
     */
    data: XOR<IPRExhibitionFormCreateInput, IPRExhibitionFormUncheckedCreateInput>
  }

  /**
   * IPRExhibitionForm createMany
   */
  export type IPRExhibitionFormCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many IPRExhibitionForms.
     */
    data: IPRExhibitionFormCreateManyInput | IPRExhibitionFormCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * IPRExhibitionForm createManyAndReturn
   */
  export type IPRExhibitionFormCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IPRExhibitionForm
     */
    select?: IPRExhibitionFormSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many IPRExhibitionForms.
     */
    data: IPRExhibitionFormCreateManyInput | IPRExhibitionFormCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * IPRExhibitionForm update
   */
  export type IPRExhibitionFormUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IPRExhibitionForm
     */
    select?: IPRExhibitionFormSelect<ExtArgs> | null
    /**
     * The data needed to update a IPRExhibitionForm.
     */
    data: XOR<IPRExhibitionFormUpdateInput, IPRExhibitionFormUncheckedUpdateInput>
    /**
     * Choose, which IPRExhibitionForm to update.
     */
    where: IPRExhibitionFormWhereUniqueInput
  }

  /**
   * IPRExhibitionForm updateMany
   */
  export type IPRExhibitionFormUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update IPRExhibitionForms.
     */
    data: XOR<IPRExhibitionFormUpdateManyMutationInput, IPRExhibitionFormUncheckedUpdateManyInput>
    /**
     * Filter which IPRExhibitionForms to update
     */
    where?: IPRExhibitionFormWhereInput
  }

  /**
   * IPRExhibitionForm upsert
   */
  export type IPRExhibitionFormUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IPRExhibitionForm
     */
    select?: IPRExhibitionFormSelect<ExtArgs> | null
    /**
     * The filter to search for the IPRExhibitionForm to update in case it exists.
     */
    where: IPRExhibitionFormWhereUniqueInput
    /**
     * In case the IPRExhibitionForm found by the `where` argument doesn't exist, create a new IPRExhibitionForm with this data.
     */
    create: XOR<IPRExhibitionFormCreateInput, IPRExhibitionFormUncheckedCreateInput>
    /**
     * In case the IPRExhibitionForm was found with the provided `where` argument, update it with this data.
     */
    update: XOR<IPRExhibitionFormUpdateInput, IPRExhibitionFormUncheckedUpdateInput>
  }

  /**
   * IPRExhibitionForm delete
   */
  export type IPRExhibitionFormDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IPRExhibitionForm
     */
    select?: IPRExhibitionFormSelect<ExtArgs> | null
    /**
     * Filter which IPRExhibitionForm to delete.
     */
    where: IPRExhibitionFormWhereUniqueInput
  }

  /**
   * IPRExhibitionForm deleteMany
   */
  export type IPRExhibitionFormDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which IPRExhibitionForms to delete
     */
    where?: IPRExhibitionFormWhereInput
  }

  /**
   * IPRExhibitionForm without action
   */
  export type IPRExhibitionFormDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IPRExhibitionForm
     */
    select?: IPRExhibitionFormSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const RatingsScalarFieldEnum: {
    id: 'id',
    iprRating: 'iprRating',
    fciptRating: 'fciptRating',
    knowledge: 'knowledge',
    explanationsIPR: 'explanationsIPR',
    explanationsFCIPT: 'explanationsFCIPT',
    knowledgeBefore: 'knowledgeBefore',
    knowledgeAfter: 'knowledgeAfter',
    technicalContents: 'technicalContents',
    easeOfUnderstanding: 'easeOfUnderstanding',
    feedbackFormId: 'feedbackFormId'
  };

  export type RatingsScalarFieldEnum = (typeof RatingsScalarFieldEnum)[keyof typeof RatingsScalarFieldEnum]


  export const FeedbackFormScalarFieldEnum: {
    id: 'id',
    institutionName: 'institutionName',
    website: 'website',
    visitDate: 'visitDate',
    staffName: 'staffName',
    staffEmail: 'staffEmail',
    staffMobile: 'staffMobile',
    totalStudents: 'totalStudents',
    accompanyingStaff: 'accompanyingStaff',
    sources: 'sources',
    campuses: 'campuses',
    best: 'best',
    worst: 'worst',
    suggestions: 'suggestions',
    comments: 'comments',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FeedbackFormScalarFieldEnum = (typeof FeedbackFormScalarFieldEnum)[keyof typeof FeedbackFormScalarFieldEnum]


  export const VisitorScalarFieldEnum: {
    id: 'id',
    institutionName: 'institutionName',
    studentBranch: 'studentBranch',
    studentSem: 'studentSem',
    numStudents: 'numStudents',
    numFaculty: 'numFaculty',
    name: 'name',
    position: 'position',
    email: 'email',
    mobile: 'mobile',
    campus: 'campus',
    ipr_time: 'ipr_time',
    fcipt_time: 'fcipt_time',
    visit_date: 'visit_date',
    visit_time: 'visit_time',
    materials: 'materials',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type VisitorScalarFieldEnum = (typeof VisitorScalarFieldEnum)[keyof typeof VisitorScalarFieldEnum]


  export const IPRExhibitionFormScalarFieldEnum: {
    id: 'id',
    hallDimension: 'hallDimension',
    isEnclosedHall: 'isEnclosedHall',
    canBeDarkened: 'canBeDarkened',
    hasCooling: 'hasCooling',
    isGroundFloor: 'isGroundFloor',
    hasStorageSpace: 'hasStorageSpace',
    powerOutlets: 'powerOutlets',
    numTables: 'numTables',
    vrSpace: 'vrSpace',
    hasWifi: 'hasWifi',
    lectureHallArea: 'lectureHallArea',
    seatingCapacity: 'seatingCapacity',
    hasAVFacilities: 'hasAVFacilities',
    distanceFromExhibition: 'distanceFromExhibition',
    accommodationProvided: 'accommodationProvided',
    localTransportation: 'localTransportation',
    secureParkingSpace: 'secureParkingSpace',
    manpowerForLoading: 'manpowerForLoading',
    contactPersonName: 'contactPersonName',
    contactPersonMobile: 'contactPersonMobile',
    contactPersonEmail: 'contactPersonEmail',
    venueLocation: 'venueLocation',
    teacherInvitation: 'teacherInvitation',
    teacherRegistration: 'teacherRegistration',
    providesWritingMaterials: 'providesWritingMaterials',
    providesRefreshments: 'providesRefreshments',
    quizForSchoolStudents: 'quizForSchoolStudents',
    quizTeamSelection: 'quizTeamSelection',
    quizArrangements: 'quizArrangements',
    quizRefreshments: 'quizRefreshments'
  };

  export type IPRExhibitionFormScalarFieldEnum = (typeof IPRExhibitionFormScalarFieldEnum)[keyof typeof IPRExhibitionFormScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type RatingsWhereInput = {
    AND?: RatingsWhereInput | RatingsWhereInput[]
    OR?: RatingsWhereInput[]
    NOT?: RatingsWhereInput | RatingsWhereInput[]
    id?: IntFilter<"Ratings"> | number
    iprRating?: IntFilter<"Ratings"> | number
    fciptRating?: IntFilter<"Ratings"> | number
    knowledge?: IntFilter<"Ratings"> | number
    explanationsIPR?: IntFilter<"Ratings"> | number
    explanationsFCIPT?: IntFilter<"Ratings"> | number
    knowledgeBefore?: IntFilter<"Ratings"> | number
    knowledgeAfter?: IntFilter<"Ratings"> | number
    technicalContents?: IntFilter<"Ratings"> | number
    easeOfUnderstanding?: IntFilter<"Ratings"> | number
    feedbackFormId?: IntFilter<"Ratings"> | number
    feedbackForm?: XOR<FeedbackFormRelationFilter, feedbackFormWhereInput>
  }

  export type RatingsOrderByWithRelationInput = {
    id?: SortOrder
    iprRating?: SortOrder
    fciptRating?: SortOrder
    knowledge?: SortOrder
    explanationsIPR?: SortOrder
    explanationsFCIPT?: SortOrder
    knowledgeBefore?: SortOrder
    knowledgeAfter?: SortOrder
    technicalContents?: SortOrder
    easeOfUnderstanding?: SortOrder
    feedbackFormId?: SortOrder
    feedbackForm?: feedbackFormOrderByWithRelationInput
  }

  export type RatingsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    feedbackFormId?: number
    AND?: RatingsWhereInput | RatingsWhereInput[]
    OR?: RatingsWhereInput[]
    NOT?: RatingsWhereInput | RatingsWhereInput[]
    iprRating?: IntFilter<"Ratings"> | number
    fciptRating?: IntFilter<"Ratings"> | number
    knowledge?: IntFilter<"Ratings"> | number
    explanationsIPR?: IntFilter<"Ratings"> | number
    explanationsFCIPT?: IntFilter<"Ratings"> | number
    knowledgeBefore?: IntFilter<"Ratings"> | number
    knowledgeAfter?: IntFilter<"Ratings"> | number
    technicalContents?: IntFilter<"Ratings"> | number
    easeOfUnderstanding?: IntFilter<"Ratings"> | number
    feedbackForm?: XOR<FeedbackFormRelationFilter, feedbackFormWhereInput>
  }, "id" | "feedbackFormId">

  export type RatingsOrderByWithAggregationInput = {
    id?: SortOrder
    iprRating?: SortOrder
    fciptRating?: SortOrder
    knowledge?: SortOrder
    explanationsIPR?: SortOrder
    explanationsFCIPT?: SortOrder
    knowledgeBefore?: SortOrder
    knowledgeAfter?: SortOrder
    technicalContents?: SortOrder
    easeOfUnderstanding?: SortOrder
    feedbackFormId?: SortOrder
    _count?: RatingsCountOrderByAggregateInput
    _avg?: RatingsAvgOrderByAggregateInput
    _max?: RatingsMaxOrderByAggregateInput
    _min?: RatingsMinOrderByAggregateInput
    _sum?: RatingsSumOrderByAggregateInput
  }

  export type RatingsScalarWhereWithAggregatesInput = {
    AND?: RatingsScalarWhereWithAggregatesInput | RatingsScalarWhereWithAggregatesInput[]
    OR?: RatingsScalarWhereWithAggregatesInput[]
    NOT?: RatingsScalarWhereWithAggregatesInput | RatingsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Ratings"> | number
    iprRating?: IntWithAggregatesFilter<"Ratings"> | number
    fciptRating?: IntWithAggregatesFilter<"Ratings"> | number
    knowledge?: IntWithAggregatesFilter<"Ratings"> | number
    explanationsIPR?: IntWithAggregatesFilter<"Ratings"> | number
    explanationsFCIPT?: IntWithAggregatesFilter<"Ratings"> | number
    knowledgeBefore?: IntWithAggregatesFilter<"Ratings"> | number
    knowledgeAfter?: IntWithAggregatesFilter<"Ratings"> | number
    technicalContents?: IntWithAggregatesFilter<"Ratings"> | number
    easeOfUnderstanding?: IntWithAggregatesFilter<"Ratings"> | number
    feedbackFormId?: IntWithAggregatesFilter<"Ratings"> | number
  }

  export type feedbackFormWhereInput = {
    AND?: feedbackFormWhereInput | feedbackFormWhereInput[]
    OR?: feedbackFormWhereInput[]
    NOT?: feedbackFormWhereInput | feedbackFormWhereInput[]
    id?: IntFilter<"feedbackForm"> | number
    institutionName?: StringFilter<"feedbackForm"> | string
    website?: StringFilter<"feedbackForm"> | string
    visitDate?: DateTimeFilter<"feedbackForm"> | Date | string
    staffName?: StringFilter<"feedbackForm"> | string
    staffEmail?: StringFilter<"feedbackForm"> | string
    staffMobile?: StringFilter<"feedbackForm"> | string
    totalStudents?: IntFilter<"feedbackForm"> | number
    accompanyingStaff?: IntFilter<"feedbackForm"> | number
    sources?: StringNullableListFilter<"feedbackForm">
    campuses?: StringNullableListFilter<"feedbackForm">
    best?: StringNullableFilter<"feedbackForm"> | string | null
    worst?: StringNullableFilter<"feedbackForm"> | string | null
    suggestions?: StringNullableFilter<"feedbackForm"> | string | null
    comments?: StringNullableFilter<"feedbackForm"> | string | null
    createdAt?: DateTimeFilter<"feedbackForm"> | Date | string
    updatedAt?: DateTimeFilter<"feedbackForm"> | Date | string
    ratings?: XOR<RatingsNullableRelationFilter, RatingsWhereInput> | null
  }

  export type feedbackFormOrderByWithRelationInput = {
    id?: SortOrder
    institutionName?: SortOrder
    website?: SortOrder
    visitDate?: SortOrder
    staffName?: SortOrder
    staffEmail?: SortOrder
    staffMobile?: SortOrder
    totalStudents?: SortOrder
    accompanyingStaff?: SortOrder
    sources?: SortOrder
    campuses?: SortOrder
    best?: SortOrderInput | SortOrder
    worst?: SortOrderInput | SortOrder
    suggestions?: SortOrderInput | SortOrder
    comments?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ratings?: RatingsOrderByWithRelationInput
  }

  export type feedbackFormWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: feedbackFormWhereInput | feedbackFormWhereInput[]
    OR?: feedbackFormWhereInput[]
    NOT?: feedbackFormWhereInput | feedbackFormWhereInput[]
    institutionName?: StringFilter<"feedbackForm"> | string
    website?: StringFilter<"feedbackForm"> | string
    visitDate?: DateTimeFilter<"feedbackForm"> | Date | string
    staffName?: StringFilter<"feedbackForm"> | string
    staffEmail?: StringFilter<"feedbackForm"> | string
    staffMobile?: StringFilter<"feedbackForm"> | string
    totalStudents?: IntFilter<"feedbackForm"> | number
    accompanyingStaff?: IntFilter<"feedbackForm"> | number
    sources?: StringNullableListFilter<"feedbackForm">
    campuses?: StringNullableListFilter<"feedbackForm">
    best?: StringNullableFilter<"feedbackForm"> | string | null
    worst?: StringNullableFilter<"feedbackForm"> | string | null
    suggestions?: StringNullableFilter<"feedbackForm"> | string | null
    comments?: StringNullableFilter<"feedbackForm"> | string | null
    createdAt?: DateTimeFilter<"feedbackForm"> | Date | string
    updatedAt?: DateTimeFilter<"feedbackForm"> | Date | string
    ratings?: XOR<RatingsNullableRelationFilter, RatingsWhereInput> | null
  }, "id">

  export type feedbackFormOrderByWithAggregationInput = {
    id?: SortOrder
    institutionName?: SortOrder
    website?: SortOrder
    visitDate?: SortOrder
    staffName?: SortOrder
    staffEmail?: SortOrder
    staffMobile?: SortOrder
    totalStudents?: SortOrder
    accompanyingStaff?: SortOrder
    sources?: SortOrder
    campuses?: SortOrder
    best?: SortOrderInput | SortOrder
    worst?: SortOrderInput | SortOrder
    suggestions?: SortOrderInput | SortOrder
    comments?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: feedbackFormCountOrderByAggregateInput
    _avg?: feedbackFormAvgOrderByAggregateInput
    _max?: feedbackFormMaxOrderByAggregateInput
    _min?: feedbackFormMinOrderByAggregateInput
    _sum?: feedbackFormSumOrderByAggregateInput
  }

  export type feedbackFormScalarWhereWithAggregatesInput = {
    AND?: feedbackFormScalarWhereWithAggregatesInput | feedbackFormScalarWhereWithAggregatesInput[]
    OR?: feedbackFormScalarWhereWithAggregatesInput[]
    NOT?: feedbackFormScalarWhereWithAggregatesInput | feedbackFormScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"feedbackForm"> | number
    institutionName?: StringWithAggregatesFilter<"feedbackForm"> | string
    website?: StringWithAggregatesFilter<"feedbackForm"> | string
    visitDate?: DateTimeWithAggregatesFilter<"feedbackForm"> | Date | string
    staffName?: StringWithAggregatesFilter<"feedbackForm"> | string
    staffEmail?: StringWithAggregatesFilter<"feedbackForm"> | string
    staffMobile?: StringWithAggregatesFilter<"feedbackForm"> | string
    totalStudents?: IntWithAggregatesFilter<"feedbackForm"> | number
    accompanyingStaff?: IntWithAggregatesFilter<"feedbackForm"> | number
    sources?: StringNullableListFilter<"feedbackForm">
    campuses?: StringNullableListFilter<"feedbackForm">
    best?: StringNullableWithAggregatesFilter<"feedbackForm"> | string | null
    worst?: StringNullableWithAggregatesFilter<"feedbackForm"> | string | null
    suggestions?: StringNullableWithAggregatesFilter<"feedbackForm"> | string | null
    comments?: StringNullableWithAggregatesFilter<"feedbackForm"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"feedbackForm"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"feedbackForm"> | Date | string
  }

  export type VisitorWhereInput = {
    AND?: VisitorWhereInput | VisitorWhereInput[]
    OR?: VisitorWhereInput[]
    NOT?: VisitorWhereInput | VisitorWhereInput[]
    id?: IntFilter<"Visitor"> | number
    institutionName?: StringFilter<"Visitor"> | string
    studentBranch?: StringFilter<"Visitor"> | string
    studentSem?: IntFilter<"Visitor"> | number
    numStudents?: IntFilter<"Visitor"> | number
    numFaculty?: IntFilter<"Visitor"> | number
    name?: StringFilter<"Visitor"> | string
    position?: StringFilter<"Visitor"> | string
    email?: StringFilter<"Visitor"> | string
    mobile?: StringFilter<"Visitor"> | string
    campus?: StringNullableListFilter<"Visitor">
    ipr_time?: StringNullableFilter<"Visitor"> | string | null
    fcipt_time?: StringNullableFilter<"Visitor"> | string | null
    visit_date?: DateTimeFilter<"Visitor"> | Date | string
    visit_time?: StringFilter<"Visitor"> | string
    materials?: StringNullableListFilter<"Visitor">
    createdAt?: DateTimeFilter<"Visitor"> | Date | string
    updatedAt?: DateTimeFilter<"Visitor"> | Date | string
  }

  export type VisitorOrderByWithRelationInput = {
    id?: SortOrder
    institutionName?: SortOrder
    studentBranch?: SortOrder
    studentSem?: SortOrder
    numStudents?: SortOrder
    numFaculty?: SortOrder
    name?: SortOrder
    position?: SortOrder
    email?: SortOrder
    mobile?: SortOrder
    campus?: SortOrder
    ipr_time?: SortOrderInput | SortOrder
    fcipt_time?: SortOrderInput | SortOrder
    visit_date?: SortOrder
    visit_time?: SortOrder
    materials?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VisitorWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: VisitorWhereInput | VisitorWhereInput[]
    OR?: VisitorWhereInput[]
    NOT?: VisitorWhereInput | VisitorWhereInput[]
    institutionName?: StringFilter<"Visitor"> | string
    studentBranch?: StringFilter<"Visitor"> | string
    studentSem?: IntFilter<"Visitor"> | number
    numStudents?: IntFilter<"Visitor"> | number
    numFaculty?: IntFilter<"Visitor"> | number
    name?: StringFilter<"Visitor"> | string
    position?: StringFilter<"Visitor"> | string
    email?: StringFilter<"Visitor"> | string
    mobile?: StringFilter<"Visitor"> | string
    campus?: StringNullableListFilter<"Visitor">
    ipr_time?: StringNullableFilter<"Visitor"> | string | null
    fcipt_time?: StringNullableFilter<"Visitor"> | string | null
    visit_date?: DateTimeFilter<"Visitor"> | Date | string
    visit_time?: StringFilter<"Visitor"> | string
    materials?: StringNullableListFilter<"Visitor">
    createdAt?: DateTimeFilter<"Visitor"> | Date | string
    updatedAt?: DateTimeFilter<"Visitor"> | Date | string
  }, "id">

  export type VisitorOrderByWithAggregationInput = {
    id?: SortOrder
    institutionName?: SortOrder
    studentBranch?: SortOrder
    studentSem?: SortOrder
    numStudents?: SortOrder
    numFaculty?: SortOrder
    name?: SortOrder
    position?: SortOrder
    email?: SortOrder
    mobile?: SortOrder
    campus?: SortOrder
    ipr_time?: SortOrderInput | SortOrder
    fcipt_time?: SortOrderInput | SortOrder
    visit_date?: SortOrder
    visit_time?: SortOrder
    materials?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: VisitorCountOrderByAggregateInput
    _avg?: VisitorAvgOrderByAggregateInput
    _max?: VisitorMaxOrderByAggregateInput
    _min?: VisitorMinOrderByAggregateInput
    _sum?: VisitorSumOrderByAggregateInput
  }

  export type VisitorScalarWhereWithAggregatesInput = {
    AND?: VisitorScalarWhereWithAggregatesInput | VisitorScalarWhereWithAggregatesInput[]
    OR?: VisitorScalarWhereWithAggregatesInput[]
    NOT?: VisitorScalarWhereWithAggregatesInput | VisitorScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Visitor"> | number
    institutionName?: StringWithAggregatesFilter<"Visitor"> | string
    studentBranch?: StringWithAggregatesFilter<"Visitor"> | string
    studentSem?: IntWithAggregatesFilter<"Visitor"> | number
    numStudents?: IntWithAggregatesFilter<"Visitor"> | number
    numFaculty?: IntWithAggregatesFilter<"Visitor"> | number
    name?: StringWithAggregatesFilter<"Visitor"> | string
    position?: StringWithAggregatesFilter<"Visitor"> | string
    email?: StringWithAggregatesFilter<"Visitor"> | string
    mobile?: StringWithAggregatesFilter<"Visitor"> | string
    campus?: StringNullableListFilter<"Visitor">
    ipr_time?: StringNullableWithAggregatesFilter<"Visitor"> | string | null
    fcipt_time?: StringNullableWithAggregatesFilter<"Visitor"> | string | null
    visit_date?: DateTimeWithAggregatesFilter<"Visitor"> | Date | string
    visit_time?: StringWithAggregatesFilter<"Visitor"> | string
    materials?: StringNullableListFilter<"Visitor">
    createdAt?: DateTimeWithAggregatesFilter<"Visitor"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Visitor"> | Date | string
  }

  export type IPRExhibitionFormWhereInput = {
    AND?: IPRExhibitionFormWhereInput | IPRExhibitionFormWhereInput[]
    OR?: IPRExhibitionFormWhereInput[]
    NOT?: IPRExhibitionFormWhereInput | IPRExhibitionFormWhereInput[]
    id?: IntFilter<"IPRExhibitionForm"> | number
    hallDimension?: StringFilter<"IPRExhibitionForm"> | string
    isEnclosedHall?: StringFilter<"IPRExhibitionForm"> | string
    canBeDarkened?: StringFilter<"IPRExhibitionForm"> | string
    hasCooling?: StringNullableFilter<"IPRExhibitionForm"> | string | null
    isGroundFloor?: StringFilter<"IPRExhibitionForm"> | string
    hasStorageSpace?: StringNullableFilter<"IPRExhibitionForm"> | string | null
    powerOutlets?: IntFilter<"IPRExhibitionForm"> | number
    numTables?: IntNullableFilter<"IPRExhibitionForm"> | number | null
    vrSpace?: StringNullableFilter<"IPRExhibitionForm"> | string | null
    hasWifi?: StringNullableFilter<"IPRExhibitionForm"> | string | null
    lectureHallArea?: StringFilter<"IPRExhibitionForm"> | string
    seatingCapacity?: IntFilter<"IPRExhibitionForm"> | number
    hasAVFacilities?: StringNullableFilter<"IPRExhibitionForm"> | string | null
    distanceFromExhibition?: StringNullableFilter<"IPRExhibitionForm"> | string | null
    accommodationProvided?: StringNullableFilter<"IPRExhibitionForm"> | string | null
    localTransportation?: StringNullableFilter<"IPRExhibitionForm"> | string | null
    secureParkingSpace?: StringNullableFilter<"IPRExhibitionForm"> | string | null
    manpowerForLoading?: StringNullableFilter<"IPRExhibitionForm"> | string | null
    contactPersonName?: StringFilter<"IPRExhibitionForm"> | string
    contactPersonMobile?: StringFilter<"IPRExhibitionForm"> | string
    contactPersonEmail?: StringFilter<"IPRExhibitionForm"> | string
    venueLocation?: StringFilter<"IPRExhibitionForm"> | string
    teacherInvitation?: IntFilter<"IPRExhibitionForm"> | number
    teacherRegistration?: IntFilter<"IPRExhibitionForm"> | number
    providesWritingMaterials?: StringNullableFilter<"IPRExhibitionForm"> | string | null
    providesRefreshments?: StringNullableFilter<"IPRExhibitionForm"> | string | null
    quizForSchoolStudents?: StringNullableFilter<"IPRExhibitionForm"> | string | null
    quizTeamSelection?: StringNullableFilter<"IPRExhibitionForm"> | string | null
    quizArrangements?: StringNullableFilter<"IPRExhibitionForm"> | string | null
    quizRefreshments?: StringNullableFilter<"IPRExhibitionForm"> | string | null
  }

  export type IPRExhibitionFormOrderByWithRelationInput = {
    id?: SortOrder
    hallDimension?: SortOrder
    isEnclosedHall?: SortOrder
    canBeDarkened?: SortOrder
    hasCooling?: SortOrderInput | SortOrder
    isGroundFloor?: SortOrder
    hasStorageSpace?: SortOrderInput | SortOrder
    powerOutlets?: SortOrder
    numTables?: SortOrderInput | SortOrder
    vrSpace?: SortOrderInput | SortOrder
    hasWifi?: SortOrderInput | SortOrder
    lectureHallArea?: SortOrder
    seatingCapacity?: SortOrder
    hasAVFacilities?: SortOrderInput | SortOrder
    distanceFromExhibition?: SortOrderInput | SortOrder
    accommodationProvided?: SortOrderInput | SortOrder
    localTransportation?: SortOrderInput | SortOrder
    secureParkingSpace?: SortOrderInput | SortOrder
    manpowerForLoading?: SortOrderInput | SortOrder
    contactPersonName?: SortOrder
    contactPersonMobile?: SortOrder
    contactPersonEmail?: SortOrder
    venueLocation?: SortOrder
    teacherInvitation?: SortOrder
    teacherRegistration?: SortOrder
    providesWritingMaterials?: SortOrderInput | SortOrder
    providesRefreshments?: SortOrderInput | SortOrder
    quizForSchoolStudents?: SortOrderInput | SortOrder
    quizTeamSelection?: SortOrderInput | SortOrder
    quizArrangements?: SortOrderInput | SortOrder
    quizRefreshments?: SortOrderInput | SortOrder
  }

  export type IPRExhibitionFormWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: IPRExhibitionFormWhereInput | IPRExhibitionFormWhereInput[]
    OR?: IPRExhibitionFormWhereInput[]
    NOT?: IPRExhibitionFormWhereInput | IPRExhibitionFormWhereInput[]
    hallDimension?: StringFilter<"IPRExhibitionForm"> | string
    isEnclosedHall?: StringFilter<"IPRExhibitionForm"> | string
    canBeDarkened?: StringFilter<"IPRExhibitionForm"> | string
    hasCooling?: StringNullableFilter<"IPRExhibitionForm"> | string | null
    isGroundFloor?: StringFilter<"IPRExhibitionForm"> | string
    hasStorageSpace?: StringNullableFilter<"IPRExhibitionForm"> | string | null
    powerOutlets?: IntFilter<"IPRExhibitionForm"> | number
    numTables?: IntNullableFilter<"IPRExhibitionForm"> | number | null
    vrSpace?: StringNullableFilter<"IPRExhibitionForm"> | string | null
    hasWifi?: StringNullableFilter<"IPRExhibitionForm"> | string | null
    lectureHallArea?: StringFilter<"IPRExhibitionForm"> | string
    seatingCapacity?: IntFilter<"IPRExhibitionForm"> | number
    hasAVFacilities?: StringNullableFilter<"IPRExhibitionForm"> | string | null
    distanceFromExhibition?: StringNullableFilter<"IPRExhibitionForm"> | string | null
    accommodationProvided?: StringNullableFilter<"IPRExhibitionForm"> | string | null
    localTransportation?: StringNullableFilter<"IPRExhibitionForm"> | string | null
    secureParkingSpace?: StringNullableFilter<"IPRExhibitionForm"> | string | null
    manpowerForLoading?: StringNullableFilter<"IPRExhibitionForm"> | string | null
    contactPersonName?: StringFilter<"IPRExhibitionForm"> | string
    contactPersonMobile?: StringFilter<"IPRExhibitionForm"> | string
    contactPersonEmail?: StringFilter<"IPRExhibitionForm"> | string
    venueLocation?: StringFilter<"IPRExhibitionForm"> | string
    teacherInvitation?: IntFilter<"IPRExhibitionForm"> | number
    teacherRegistration?: IntFilter<"IPRExhibitionForm"> | number
    providesWritingMaterials?: StringNullableFilter<"IPRExhibitionForm"> | string | null
    providesRefreshments?: StringNullableFilter<"IPRExhibitionForm"> | string | null
    quizForSchoolStudents?: StringNullableFilter<"IPRExhibitionForm"> | string | null
    quizTeamSelection?: StringNullableFilter<"IPRExhibitionForm"> | string | null
    quizArrangements?: StringNullableFilter<"IPRExhibitionForm"> | string | null
    quizRefreshments?: StringNullableFilter<"IPRExhibitionForm"> | string | null
  }, "id">

  export type IPRExhibitionFormOrderByWithAggregationInput = {
    id?: SortOrder
    hallDimension?: SortOrder
    isEnclosedHall?: SortOrder
    canBeDarkened?: SortOrder
    hasCooling?: SortOrderInput | SortOrder
    isGroundFloor?: SortOrder
    hasStorageSpace?: SortOrderInput | SortOrder
    powerOutlets?: SortOrder
    numTables?: SortOrderInput | SortOrder
    vrSpace?: SortOrderInput | SortOrder
    hasWifi?: SortOrderInput | SortOrder
    lectureHallArea?: SortOrder
    seatingCapacity?: SortOrder
    hasAVFacilities?: SortOrderInput | SortOrder
    distanceFromExhibition?: SortOrderInput | SortOrder
    accommodationProvided?: SortOrderInput | SortOrder
    localTransportation?: SortOrderInput | SortOrder
    secureParkingSpace?: SortOrderInput | SortOrder
    manpowerForLoading?: SortOrderInput | SortOrder
    contactPersonName?: SortOrder
    contactPersonMobile?: SortOrder
    contactPersonEmail?: SortOrder
    venueLocation?: SortOrder
    teacherInvitation?: SortOrder
    teacherRegistration?: SortOrder
    providesWritingMaterials?: SortOrderInput | SortOrder
    providesRefreshments?: SortOrderInput | SortOrder
    quizForSchoolStudents?: SortOrderInput | SortOrder
    quizTeamSelection?: SortOrderInput | SortOrder
    quizArrangements?: SortOrderInput | SortOrder
    quizRefreshments?: SortOrderInput | SortOrder
    _count?: IPRExhibitionFormCountOrderByAggregateInput
    _avg?: IPRExhibitionFormAvgOrderByAggregateInput
    _max?: IPRExhibitionFormMaxOrderByAggregateInput
    _min?: IPRExhibitionFormMinOrderByAggregateInput
    _sum?: IPRExhibitionFormSumOrderByAggregateInput
  }

  export type IPRExhibitionFormScalarWhereWithAggregatesInput = {
    AND?: IPRExhibitionFormScalarWhereWithAggregatesInput | IPRExhibitionFormScalarWhereWithAggregatesInput[]
    OR?: IPRExhibitionFormScalarWhereWithAggregatesInput[]
    NOT?: IPRExhibitionFormScalarWhereWithAggregatesInput | IPRExhibitionFormScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"IPRExhibitionForm"> | number
    hallDimension?: StringWithAggregatesFilter<"IPRExhibitionForm"> | string
    isEnclosedHall?: StringWithAggregatesFilter<"IPRExhibitionForm"> | string
    canBeDarkened?: StringWithAggregatesFilter<"IPRExhibitionForm"> | string
    hasCooling?: StringNullableWithAggregatesFilter<"IPRExhibitionForm"> | string | null
    isGroundFloor?: StringWithAggregatesFilter<"IPRExhibitionForm"> | string
    hasStorageSpace?: StringNullableWithAggregatesFilter<"IPRExhibitionForm"> | string | null
    powerOutlets?: IntWithAggregatesFilter<"IPRExhibitionForm"> | number
    numTables?: IntNullableWithAggregatesFilter<"IPRExhibitionForm"> | number | null
    vrSpace?: StringNullableWithAggregatesFilter<"IPRExhibitionForm"> | string | null
    hasWifi?: StringNullableWithAggregatesFilter<"IPRExhibitionForm"> | string | null
    lectureHallArea?: StringWithAggregatesFilter<"IPRExhibitionForm"> | string
    seatingCapacity?: IntWithAggregatesFilter<"IPRExhibitionForm"> | number
    hasAVFacilities?: StringNullableWithAggregatesFilter<"IPRExhibitionForm"> | string | null
    distanceFromExhibition?: StringNullableWithAggregatesFilter<"IPRExhibitionForm"> | string | null
    accommodationProvided?: StringNullableWithAggregatesFilter<"IPRExhibitionForm"> | string | null
    localTransportation?: StringNullableWithAggregatesFilter<"IPRExhibitionForm"> | string | null
    secureParkingSpace?: StringNullableWithAggregatesFilter<"IPRExhibitionForm"> | string | null
    manpowerForLoading?: StringNullableWithAggregatesFilter<"IPRExhibitionForm"> | string | null
    contactPersonName?: StringWithAggregatesFilter<"IPRExhibitionForm"> | string
    contactPersonMobile?: StringWithAggregatesFilter<"IPRExhibitionForm"> | string
    contactPersonEmail?: StringWithAggregatesFilter<"IPRExhibitionForm"> | string
    venueLocation?: StringWithAggregatesFilter<"IPRExhibitionForm"> | string
    teacherInvitation?: IntWithAggregatesFilter<"IPRExhibitionForm"> | number
    teacherRegistration?: IntWithAggregatesFilter<"IPRExhibitionForm"> | number
    providesWritingMaterials?: StringNullableWithAggregatesFilter<"IPRExhibitionForm"> | string | null
    providesRefreshments?: StringNullableWithAggregatesFilter<"IPRExhibitionForm"> | string | null
    quizForSchoolStudents?: StringNullableWithAggregatesFilter<"IPRExhibitionForm"> | string | null
    quizTeamSelection?: StringNullableWithAggregatesFilter<"IPRExhibitionForm"> | string | null
    quizArrangements?: StringNullableWithAggregatesFilter<"IPRExhibitionForm"> | string | null
    quizRefreshments?: StringNullableWithAggregatesFilter<"IPRExhibitionForm"> | string | null
  }

  export type RatingsCreateInput = {
    iprRating: number
    fciptRating: number
    knowledge: number
    explanationsIPR: number
    explanationsFCIPT: number
    knowledgeBefore: number
    knowledgeAfter: number
    technicalContents: number
    easeOfUnderstanding: number
    feedbackForm: feedbackFormCreateNestedOneWithoutRatingsInput
  }

  export type RatingsUncheckedCreateInput = {
    id?: number
    iprRating: number
    fciptRating: number
    knowledge: number
    explanationsIPR: number
    explanationsFCIPT: number
    knowledgeBefore: number
    knowledgeAfter: number
    technicalContents: number
    easeOfUnderstanding: number
    feedbackFormId: number
  }

  export type RatingsUpdateInput = {
    iprRating?: IntFieldUpdateOperationsInput | number
    fciptRating?: IntFieldUpdateOperationsInput | number
    knowledge?: IntFieldUpdateOperationsInput | number
    explanationsIPR?: IntFieldUpdateOperationsInput | number
    explanationsFCIPT?: IntFieldUpdateOperationsInput | number
    knowledgeBefore?: IntFieldUpdateOperationsInput | number
    knowledgeAfter?: IntFieldUpdateOperationsInput | number
    technicalContents?: IntFieldUpdateOperationsInput | number
    easeOfUnderstanding?: IntFieldUpdateOperationsInput | number
    feedbackForm?: feedbackFormUpdateOneRequiredWithoutRatingsNestedInput
  }

  export type RatingsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    iprRating?: IntFieldUpdateOperationsInput | number
    fciptRating?: IntFieldUpdateOperationsInput | number
    knowledge?: IntFieldUpdateOperationsInput | number
    explanationsIPR?: IntFieldUpdateOperationsInput | number
    explanationsFCIPT?: IntFieldUpdateOperationsInput | number
    knowledgeBefore?: IntFieldUpdateOperationsInput | number
    knowledgeAfter?: IntFieldUpdateOperationsInput | number
    technicalContents?: IntFieldUpdateOperationsInput | number
    easeOfUnderstanding?: IntFieldUpdateOperationsInput | number
    feedbackFormId?: IntFieldUpdateOperationsInput | number
  }

  export type RatingsCreateManyInput = {
    id?: number
    iprRating: number
    fciptRating: number
    knowledge: number
    explanationsIPR: number
    explanationsFCIPT: number
    knowledgeBefore: number
    knowledgeAfter: number
    technicalContents: number
    easeOfUnderstanding: number
    feedbackFormId: number
  }

  export type RatingsUpdateManyMutationInput = {
    iprRating?: IntFieldUpdateOperationsInput | number
    fciptRating?: IntFieldUpdateOperationsInput | number
    knowledge?: IntFieldUpdateOperationsInput | number
    explanationsIPR?: IntFieldUpdateOperationsInput | number
    explanationsFCIPT?: IntFieldUpdateOperationsInput | number
    knowledgeBefore?: IntFieldUpdateOperationsInput | number
    knowledgeAfter?: IntFieldUpdateOperationsInput | number
    technicalContents?: IntFieldUpdateOperationsInput | number
    easeOfUnderstanding?: IntFieldUpdateOperationsInput | number
  }

  export type RatingsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    iprRating?: IntFieldUpdateOperationsInput | number
    fciptRating?: IntFieldUpdateOperationsInput | number
    knowledge?: IntFieldUpdateOperationsInput | number
    explanationsIPR?: IntFieldUpdateOperationsInput | number
    explanationsFCIPT?: IntFieldUpdateOperationsInput | number
    knowledgeBefore?: IntFieldUpdateOperationsInput | number
    knowledgeAfter?: IntFieldUpdateOperationsInput | number
    technicalContents?: IntFieldUpdateOperationsInput | number
    easeOfUnderstanding?: IntFieldUpdateOperationsInput | number
    feedbackFormId?: IntFieldUpdateOperationsInput | number
  }

  export type feedbackFormCreateInput = {
    institutionName: string
    website: string
    visitDate: Date | string
    staffName: string
    staffEmail: string
    staffMobile: string
    totalStudents: number
    accompanyingStaff: number
    sources?: feedbackFormCreatesourcesInput | string[]
    campuses?: feedbackFormCreatecampusesInput | string[]
    best?: string | null
    worst?: string | null
    suggestions?: string | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ratings?: RatingsCreateNestedOneWithoutFeedbackFormInput
  }

  export type feedbackFormUncheckedCreateInput = {
    id?: number
    institutionName: string
    website: string
    visitDate: Date | string
    staffName: string
    staffEmail: string
    staffMobile: string
    totalStudents: number
    accompanyingStaff: number
    sources?: feedbackFormCreatesourcesInput | string[]
    campuses?: feedbackFormCreatecampusesInput | string[]
    best?: string | null
    worst?: string | null
    suggestions?: string | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ratings?: RatingsUncheckedCreateNestedOneWithoutFeedbackFormInput
  }

  export type feedbackFormUpdateInput = {
    institutionName?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    visitDate?: DateTimeFieldUpdateOperationsInput | Date | string
    staffName?: StringFieldUpdateOperationsInput | string
    staffEmail?: StringFieldUpdateOperationsInput | string
    staffMobile?: StringFieldUpdateOperationsInput | string
    totalStudents?: IntFieldUpdateOperationsInput | number
    accompanyingStaff?: IntFieldUpdateOperationsInput | number
    sources?: feedbackFormUpdatesourcesInput | string[]
    campuses?: feedbackFormUpdatecampusesInput | string[]
    best?: NullableStringFieldUpdateOperationsInput | string | null
    worst?: NullableStringFieldUpdateOperationsInput | string | null
    suggestions?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ratings?: RatingsUpdateOneWithoutFeedbackFormNestedInput
  }

  export type feedbackFormUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    institutionName?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    visitDate?: DateTimeFieldUpdateOperationsInput | Date | string
    staffName?: StringFieldUpdateOperationsInput | string
    staffEmail?: StringFieldUpdateOperationsInput | string
    staffMobile?: StringFieldUpdateOperationsInput | string
    totalStudents?: IntFieldUpdateOperationsInput | number
    accompanyingStaff?: IntFieldUpdateOperationsInput | number
    sources?: feedbackFormUpdatesourcesInput | string[]
    campuses?: feedbackFormUpdatecampusesInput | string[]
    best?: NullableStringFieldUpdateOperationsInput | string | null
    worst?: NullableStringFieldUpdateOperationsInput | string | null
    suggestions?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ratings?: RatingsUncheckedUpdateOneWithoutFeedbackFormNestedInput
  }

  export type feedbackFormCreateManyInput = {
    id?: number
    institutionName: string
    website: string
    visitDate: Date | string
    staffName: string
    staffEmail: string
    staffMobile: string
    totalStudents: number
    accompanyingStaff: number
    sources?: feedbackFormCreatesourcesInput | string[]
    campuses?: feedbackFormCreatecampusesInput | string[]
    best?: string | null
    worst?: string | null
    suggestions?: string | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type feedbackFormUpdateManyMutationInput = {
    institutionName?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    visitDate?: DateTimeFieldUpdateOperationsInput | Date | string
    staffName?: StringFieldUpdateOperationsInput | string
    staffEmail?: StringFieldUpdateOperationsInput | string
    staffMobile?: StringFieldUpdateOperationsInput | string
    totalStudents?: IntFieldUpdateOperationsInput | number
    accompanyingStaff?: IntFieldUpdateOperationsInput | number
    sources?: feedbackFormUpdatesourcesInput | string[]
    campuses?: feedbackFormUpdatecampusesInput | string[]
    best?: NullableStringFieldUpdateOperationsInput | string | null
    worst?: NullableStringFieldUpdateOperationsInput | string | null
    suggestions?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type feedbackFormUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    institutionName?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    visitDate?: DateTimeFieldUpdateOperationsInput | Date | string
    staffName?: StringFieldUpdateOperationsInput | string
    staffEmail?: StringFieldUpdateOperationsInput | string
    staffMobile?: StringFieldUpdateOperationsInput | string
    totalStudents?: IntFieldUpdateOperationsInput | number
    accompanyingStaff?: IntFieldUpdateOperationsInput | number
    sources?: feedbackFormUpdatesourcesInput | string[]
    campuses?: feedbackFormUpdatecampusesInput | string[]
    best?: NullableStringFieldUpdateOperationsInput | string | null
    worst?: NullableStringFieldUpdateOperationsInput | string | null
    suggestions?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VisitorCreateInput = {
    institutionName: string
    studentBranch: string
    studentSem: number
    numStudents: number
    numFaculty: number
    name: string
    position: string
    email: string
    mobile: string
    campus?: VisitorCreatecampusInput | string[]
    ipr_time?: string | null
    fcipt_time?: string | null
    visit_date: Date | string
    visit_time: string
    materials?: VisitorCreatematerialsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VisitorUncheckedCreateInput = {
    id?: number
    institutionName: string
    studentBranch: string
    studentSem: number
    numStudents: number
    numFaculty: number
    name: string
    position: string
    email: string
    mobile: string
    campus?: VisitorCreatecampusInput | string[]
    ipr_time?: string | null
    fcipt_time?: string | null
    visit_date: Date | string
    visit_time: string
    materials?: VisitorCreatematerialsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VisitorUpdateInput = {
    institutionName?: StringFieldUpdateOperationsInput | string
    studentBranch?: StringFieldUpdateOperationsInput | string
    studentSem?: IntFieldUpdateOperationsInput | number
    numStudents?: IntFieldUpdateOperationsInput | number
    numFaculty?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    campus?: VisitorUpdatecampusInput | string[]
    ipr_time?: NullableStringFieldUpdateOperationsInput | string | null
    fcipt_time?: NullableStringFieldUpdateOperationsInput | string | null
    visit_date?: DateTimeFieldUpdateOperationsInput | Date | string
    visit_time?: StringFieldUpdateOperationsInput | string
    materials?: VisitorUpdatematerialsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VisitorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    institutionName?: StringFieldUpdateOperationsInput | string
    studentBranch?: StringFieldUpdateOperationsInput | string
    studentSem?: IntFieldUpdateOperationsInput | number
    numStudents?: IntFieldUpdateOperationsInput | number
    numFaculty?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    campus?: VisitorUpdatecampusInput | string[]
    ipr_time?: NullableStringFieldUpdateOperationsInput | string | null
    fcipt_time?: NullableStringFieldUpdateOperationsInput | string | null
    visit_date?: DateTimeFieldUpdateOperationsInput | Date | string
    visit_time?: StringFieldUpdateOperationsInput | string
    materials?: VisitorUpdatematerialsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VisitorCreateManyInput = {
    id?: number
    institutionName: string
    studentBranch: string
    studentSem: number
    numStudents: number
    numFaculty: number
    name: string
    position: string
    email: string
    mobile: string
    campus?: VisitorCreatecampusInput | string[]
    ipr_time?: string | null
    fcipt_time?: string | null
    visit_date: Date | string
    visit_time: string
    materials?: VisitorCreatematerialsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VisitorUpdateManyMutationInput = {
    institutionName?: StringFieldUpdateOperationsInput | string
    studentBranch?: StringFieldUpdateOperationsInput | string
    studentSem?: IntFieldUpdateOperationsInput | number
    numStudents?: IntFieldUpdateOperationsInput | number
    numFaculty?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    campus?: VisitorUpdatecampusInput | string[]
    ipr_time?: NullableStringFieldUpdateOperationsInput | string | null
    fcipt_time?: NullableStringFieldUpdateOperationsInput | string | null
    visit_date?: DateTimeFieldUpdateOperationsInput | Date | string
    visit_time?: StringFieldUpdateOperationsInput | string
    materials?: VisitorUpdatematerialsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VisitorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    institutionName?: StringFieldUpdateOperationsInput | string
    studentBranch?: StringFieldUpdateOperationsInput | string
    studentSem?: IntFieldUpdateOperationsInput | number
    numStudents?: IntFieldUpdateOperationsInput | number
    numFaculty?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    campus?: VisitorUpdatecampusInput | string[]
    ipr_time?: NullableStringFieldUpdateOperationsInput | string | null
    fcipt_time?: NullableStringFieldUpdateOperationsInput | string | null
    visit_date?: DateTimeFieldUpdateOperationsInput | Date | string
    visit_time?: StringFieldUpdateOperationsInput | string
    materials?: VisitorUpdatematerialsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IPRExhibitionFormCreateInput = {
    hallDimension: string
    isEnclosedHall: string
    canBeDarkened: string
    hasCooling?: string | null
    isGroundFloor: string
    hasStorageSpace?: string | null
    powerOutlets: number
    numTables?: number | null
    vrSpace?: string | null
    hasWifi?: string | null
    lectureHallArea: string
    seatingCapacity: number
    hasAVFacilities?: string | null
    distanceFromExhibition?: string | null
    accommodationProvided?: string | null
    localTransportation?: string | null
    secureParkingSpace?: string | null
    manpowerForLoading?: string | null
    contactPersonName: string
    contactPersonMobile: string
    contactPersonEmail: string
    venueLocation: string
    teacherInvitation: number
    teacherRegistration: number
    providesWritingMaterials?: string | null
    providesRefreshments?: string | null
    quizForSchoolStudents?: string | null
    quizTeamSelection?: string | null
    quizArrangements?: string | null
    quizRefreshments?: string | null
  }

  export type IPRExhibitionFormUncheckedCreateInput = {
    id?: number
    hallDimension: string
    isEnclosedHall: string
    canBeDarkened: string
    hasCooling?: string | null
    isGroundFloor: string
    hasStorageSpace?: string | null
    powerOutlets: number
    numTables?: number | null
    vrSpace?: string | null
    hasWifi?: string | null
    lectureHallArea: string
    seatingCapacity: number
    hasAVFacilities?: string | null
    distanceFromExhibition?: string | null
    accommodationProvided?: string | null
    localTransportation?: string | null
    secureParkingSpace?: string | null
    manpowerForLoading?: string | null
    contactPersonName: string
    contactPersonMobile: string
    contactPersonEmail: string
    venueLocation: string
    teacherInvitation: number
    teacherRegistration: number
    providesWritingMaterials?: string | null
    providesRefreshments?: string | null
    quizForSchoolStudents?: string | null
    quizTeamSelection?: string | null
    quizArrangements?: string | null
    quizRefreshments?: string | null
  }

  export type IPRExhibitionFormUpdateInput = {
    hallDimension?: StringFieldUpdateOperationsInput | string
    isEnclosedHall?: StringFieldUpdateOperationsInput | string
    canBeDarkened?: StringFieldUpdateOperationsInput | string
    hasCooling?: NullableStringFieldUpdateOperationsInput | string | null
    isGroundFloor?: StringFieldUpdateOperationsInput | string
    hasStorageSpace?: NullableStringFieldUpdateOperationsInput | string | null
    powerOutlets?: IntFieldUpdateOperationsInput | number
    numTables?: NullableIntFieldUpdateOperationsInput | number | null
    vrSpace?: NullableStringFieldUpdateOperationsInput | string | null
    hasWifi?: NullableStringFieldUpdateOperationsInput | string | null
    lectureHallArea?: StringFieldUpdateOperationsInput | string
    seatingCapacity?: IntFieldUpdateOperationsInput | number
    hasAVFacilities?: NullableStringFieldUpdateOperationsInput | string | null
    distanceFromExhibition?: NullableStringFieldUpdateOperationsInput | string | null
    accommodationProvided?: NullableStringFieldUpdateOperationsInput | string | null
    localTransportation?: NullableStringFieldUpdateOperationsInput | string | null
    secureParkingSpace?: NullableStringFieldUpdateOperationsInput | string | null
    manpowerForLoading?: NullableStringFieldUpdateOperationsInput | string | null
    contactPersonName?: StringFieldUpdateOperationsInput | string
    contactPersonMobile?: StringFieldUpdateOperationsInput | string
    contactPersonEmail?: StringFieldUpdateOperationsInput | string
    venueLocation?: StringFieldUpdateOperationsInput | string
    teacherInvitation?: IntFieldUpdateOperationsInput | number
    teacherRegistration?: IntFieldUpdateOperationsInput | number
    providesWritingMaterials?: NullableStringFieldUpdateOperationsInput | string | null
    providesRefreshments?: NullableStringFieldUpdateOperationsInput | string | null
    quizForSchoolStudents?: NullableStringFieldUpdateOperationsInput | string | null
    quizTeamSelection?: NullableStringFieldUpdateOperationsInput | string | null
    quizArrangements?: NullableStringFieldUpdateOperationsInput | string | null
    quizRefreshments?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IPRExhibitionFormUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    hallDimension?: StringFieldUpdateOperationsInput | string
    isEnclosedHall?: StringFieldUpdateOperationsInput | string
    canBeDarkened?: StringFieldUpdateOperationsInput | string
    hasCooling?: NullableStringFieldUpdateOperationsInput | string | null
    isGroundFloor?: StringFieldUpdateOperationsInput | string
    hasStorageSpace?: NullableStringFieldUpdateOperationsInput | string | null
    powerOutlets?: IntFieldUpdateOperationsInput | number
    numTables?: NullableIntFieldUpdateOperationsInput | number | null
    vrSpace?: NullableStringFieldUpdateOperationsInput | string | null
    hasWifi?: NullableStringFieldUpdateOperationsInput | string | null
    lectureHallArea?: StringFieldUpdateOperationsInput | string
    seatingCapacity?: IntFieldUpdateOperationsInput | number
    hasAVFacilities?: NullableStringFieldUpdateOperationsInput | string | null
    distanceFromExhibition?: NullableStringFieldUpdateOperationsInput | string | null
    accommodationProvided?: NullableStringFieldUpdateOperationsInput | string | null
    localTransportation?: NullableStringFieldUpdateOperationsInput | string | null
    secureParkingSpace?: NullableStringFieldUpdateOperationsInput | string | null
    manpowerForLoading?: NullableStringFieldUpdateOperationsInput | string | null
    contactPersonName?: StringFieldUpdateOperationsInput | string
    contactPersonMobile?: StringFieldUpdateOperationsInput | string
    contactPersonEmail?: StringFieldUpdateOperationsInput | string
    venueLocation?: StringFieldUpdateOperationsInput | string
    teacherInvitation?: IntFieldUpdateOperationsInput | number
    teacherRegistration?: IntFieldUpdateOperationsInput | number
    providesWritingMaterials?: NullableStringFieldUpdateOperationsInput | string | null
    providesRefreshments?: NullableStringFieldUpdateOperationsInput | string | null
    quizForSchoolStudents?: NullableStringFieldUpdateOperationsInput | string | null
    quizTeamSelection?: NullableStringFieldUpdateOperationsInput | string | null
    quizArrangements?: NullableStringFieldUpdateOperationsInput | string | null
    quizRefreshments?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IPRExhibitionFormCreateManyInput = {
    id?: number
    hallDimension: string
    isEnclosedHall: string
    canBeDarkened: string
    hasCooling?: string | null
    isGroundFloor: string
    hasStorageSpace?: string | null
    powerOutlets: number
    numTables?: number | null
    vrSpace?: string | null
    hasWifi?: string | null
    lectureHallArea: string
    seatingCapacity: number
    hasAVFacilities?: string | null
    distanceFromExhibition?: string | null
    accommodationProvided?: string | null
    localTransportation?: string | null
    secureParkingSpace?: string | null
    manpowerForLoading?: string | null
    contactPersonName: string
    contactPersonMobile: string
    contactPersonEmail: string
    venueLocation: string
    teacherInvitation: number
    teacherRegistration: number
    providesWritingMaterials?: string | null
    providesRefreshments?: string | null
    quizForSchoolStudents?: string | null
    quizTeamSelection?: string | null
    quizArrangements?: string | null
    quizRefreshments?: string | null
  }

  export type IPRExhibitionFormUpdateManyMutationInput = {
    hallDimension?: StringFieldUpdateOperationsInput | string
    isEnclosedHall?: StringFieldUpdateOperationsInput | string
    canBeDarkened?: StringFieldUpdateOperationsInput | string
    hasCooling?: NullableStringFieldUpdateOperationsInput | string | null
    isGroundFloor?: StringFieldUpdateOperationsInput | string
    hasStorageSpace?: NullableStringFieldUpdateOperationsInput | string | null
    powerOutlets?: IntFieldUpdateOperationsInput | number
    numTables?: NullableIntFieldUpdateOperationsInput | number | null
    vrSpace?: NullableStringFieldUpdateOperationsInput | string | null
    hasWifi?: NullableStringFieldUpdateOperationsInput | string | null
    lectureHallArea?: StringFieldUpdateOperationsInput | string
    seatingCapacity?: IntFieldUpdateOperationsInput | number
    hasAVFacilities?: NullableStringFieldUpdateOperationsInput | string | null
    distanceFromExhibition?: NullableStringFieldUpdateOperationsInput | string | null
    accommodationProvided?: NullableStringFieldUpdateOperationsInput | string | null
    localTransportation?: NullableStringFieldUpdateOperationsInput | string | null
    secureParkingSpace?: NullableStringFieldUpdateOperationsInput | string | null
    manpowerForLoading?: NullableStringFieldUpdateOperationsInput | string | null
    contactPersonName?: StringFieldUpdateOperationsInput | string
    contactPersonMobile?: StringFieldUpdateOperationsInput | string
    contactPersonEmail?: StringFieldUpdateOperationsInput | string
    venueLocation?: StringFieldUpdateOperationsInput | string
    teacherInvitation?: IntFieldUpdateOperationsInput | number
    teacherRegistration?: IntFieldUpdateOperationsInput | number
    providesWritingMaterials?: NullableStringFieldUpdateOperationsInput | string | null
    providesRefreshments?: NullableStringFieldUpdateOperationsInput | string | null
    quizForSchoolStudents?: NullableStringFieldUpdateOperationsInput | string | null
    quizTeamSelection?: NullableStringFieldUpdateOperationsInput | string | null
    quizArrangements?: NullableStringFieldUpdateOperationsInput | string | null
    quizRefreshments?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IPRExhibitionFormUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    hallDimension?: StringFieldUpdateOperationsInput | string
    isEnclosedHall?: StringFieldUpdateOperationsInput | string
    canBeDarkened?: StringFieldUpdateOperationsInput | string
    hasCooling?: NullableStringFieldUpdateOperationsInput | string | null
    isGroundFloor?: StringFieldUpdateOperationsInput | string
    hasStorageSpace?: NullableStringFieldUpdateOperationsInput | string | null
    powerOutlets?: IntFieldUpdateOperationsInput | number
    numTables?: NullableIntFieldUpdateOperationsInput | number | null
    vrSpace?: NullableStringFieldUpdateOperationsInput | string | null
    hasWifi?: NullableStringFieldUpdateOperationsInput | string | null
    lectureHallArea?: StringFieldUpdateOperationsInput | string
    seatingCapacity?: IntFieldUpdateOperationsInput | number
    hasAVFacilities?: NullableStringFieldUpdateOperationsInput | string | null
    distanceFromExhibition?: NullableStringFieldUpdateOperationsInput | string | null
    accommodationProvided?: NullableStringFieldUpdateOperationsInput | string | null
    localTransportation?: NullableStringFieldUpdateOperationsInput | string | null
    secureParkingSpace?: NullableStringFieldUpdateOperationsInput | string | null
    manpowerForLoading?: NullableStringFieldUpdateOperationsInput | string | null
    contactPersonName?: StringFieldUpdateOperationsInput | string
    contactPersonMobile?: StringFieldUpdateOperationsInput | string
    contactPersonEmail?: StringFieldUpdateOperationsInput | string
    venueLocation?: StringFieldUpdateOperationsInput | string
    teacherInvitation?: IntFieldUpdateOperationsInput | number
    teacherRegistration?: IntFieldUpdateOperationsInput | number
    providesWritingMaterials?: NullableStringFieldUpdateOperationsInput | string | null
    providesRefreshments?: NullableStringFieldUpdateOperationsInput | string | null
    quizForSchoolStudents?: NullableStringFieldUpdateOperationsInput | string | null
    quizTeamSelection?: NullableStringFieldUpdateOperationsInput | string | null
    quizArrangements?: NullableStringFieldUpdateOperationsInput | string | null
    quizRefreshments?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type FeedbackFormRelationFilter = {
    is?: feedbackFormWhereInput
    isNot?: feedbackFormWhereInput
  }

  export type RatingsCountOrderByAggregateInput = {
    id?: SortOrder
    iprRating?: SortOrder
    fciptRating?: SortOrder
    knowledge?: SortOrder
    explanationsIPR?: SortOrder
    explanationsFCIPT?: SortOrder
    knowledgeBefore?: SortOrder
    knowledgeAfter?: SortOrder
    technicalContents?: SortOrder
    easeOfUnderstanding?: SortOrder
    feedbackFormId?: SortOrder
  }

  export type RatingsAvgOrderByAggregateInput = {
    id?: SortOrder
    iprRating?: SortOrder
    fciptRating?: SortOrder
    knowledge?: SortOrder
    explanationsIPR?: SortOrder
    explanationsFCIPT?: SortOrder
    knowledgeBefore?: SortOrder
    knowledgeAfter?: SortOrder
    technicalContents?: SortOrder
    easeOfUnderstanding?: SortOrder
    feedbackFormId?: SortOrder
  }

  export type RatingsMaxOrderByAggregateInput = {
    id?: SortOrder
    iprRating?: SortOrder
    fciptRating?: SortOrder
    knowledge?: SortOrder
    explanationsIPR?: SortOrder
    explanationsFCIPT?: SortOrder
    knowledgeBefore?: SortOrder
    knowledgeAfter?: SortOrder
    technicalContents?: SortOrder
    easeOfUnderstanding?: SortOrder
    feedbackFormId?: SortOrder
  }

  export type RatingsMinOrderByAggregateInput = {
    id?: SortOrder
    iprRating?: SortOrder
    fciptRating?: SortOrder
    knowledge?: SortOrder
    explanationsIPR?: SortOrder
    explanationsFCIPT?: SortOrder
    knowledgeBefore?: SortOrder
    knowledgeAfter?: SortOrder
    technicalContents?: SortOrder
    easeOfUnderstanding?: SortOrder
    feedbackFormId?: SortOrder
  }

  export type RatingsSumOrderByAggregateInput = {
    id?: SortOrder
    iprRating?: SortOrder
    fciptRating?: SortOrder
    knowledge?: SortOrder
    explanationsIPR?: SortOrder
    explanationsFCIPT?: SortOrder
    knowledgeBefore?: SortOrder
    knowledgeAfter?: SortOrder
    technicalContents?: SortOrder
    easeOfUnderstanding?: SortOrder
    feedbackFormId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type RatingsNullableRelationFilter = {
    is?: RatingsWhereInput | null
    isNot?: RatingsWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type feedbackFormCountOrderByAggregateInput = {
    id?: SortOrder
    institutionName?: SortOrder
    website?: SortOrder
    visitDate?: SortOrder
    staffName?: SortOrder
    staffEmail?: SortOrder
    staffMobile?: SortOrder
    totalStudents?: SortOrder
    accompanyingStaff?: SortOrder
    sources?: SortOrder
    campuses?: SortOrder
    best?: SortOrder
    worst?: SortOrder
    suggestions?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type feedbackFormAvgOrderByAggregateInput = {
    id?: SortOrder
    totalStudents?: SortOrder
    accompanyingStaff?: SortOrder
  }

  export type feedbackFormMaxOrderByAggregateInput = {
    id?: SortOrder
    institutionName?: SortOrder
    website?: SortOrder
    visitDate?: SortOrder
    staffName?: SortOrder
    staffEmail?: SortOrder
    staffMobile?: SortOrder
    totalStudents?: SortOrder
    accompanyingStaff?: SortOrder
    best?: SortOrder
    worst?: SortOrder
    suggestions?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type feedbackFormMinOrderByAggregateInput = {
    id?: SortOrder
    institutionName?: SortOrder
    website?: SortOrder
    visitDate?: SortOrder
    staffName?: SortOrder
    staffEmail?: SortOrder
    staffMobile?: SortOrder
    totalStudents?: SortOrder
    accompanyingStaff?: SortOrder
    best?: SortOrder
    worst?: SortOrder
    suggestions?: SortOrder
    comments?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type feedbackFormSumOrderByAggregateInput = {
    id?: SortOrder
    totalStudents?: SortOrder
    accompanyingStaff?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type VisitorCountOrderByAggregateInput = {
    id?: SortOrder
    institutionName?: SortOrder
    studentBranch?: SortOrder
    studentSem?: SortOrder
    numStudents?: SortOrder
    numFaculty?: SortOrder
    name?: SortOrder
    position?: SortOrder
    email?: SortOrder
    mobile?: SortOrder
    campus?: SortOrder
    ipr_time?: SortOrder
    fcipt_time?: SortOrder
    visit_date?: SortOrder
    visit_time?: SortOrder
    materials?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VisitorAvgOrderByAggregateInput = {
    id?: SortOrder
    studentSem?: SortOrder
    numStudents?: SortOrder
    numFaculty?: SortOrder
  }

  export type VisitorMaxOrderByAggregateInput = {
    id?: SortOrder
    institutionName?: SortOrder
    studentBranch?: SortOrder
    studentSem?: SortOrder
    numStudents?: SortOrder
    numFaculty?: SortOrder
    name?: SortOrder
    position?: SortOrder
    email?: SortOrder
    mobile?: SortOrder
    ipr_time?: SortOrder
    fcipt_time?: SortOrder
    visit_date?: SortOrder
    visit_time?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VisitorMinOrderByAggregateInput = {
    id?: SortOrder
    institutionName?: SortOrder
    studentBranch?: SortOrder
    studentSem?: SortOrder
    numStudents?: SortOrder
    numFaculty?: SortOrder
    name?: SortOrder
    position?: SortOrder
    email?: SortOrder
    mobile?: SortOrder
    ipr_time?: SortOrder
    fcipt_time?: SortOrder
    visit_date?: SortOrder
    visit_time?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VisitorSumOrderByAggregateInput = {
    id?: SortOrder
    studentSem?: SortOrder
    numStudents?: SortOrder
    numFaculty?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type IPRExhibitionFormCountOrderByAggregateInput = {
    id?: SortOrder
    hallDimension?: SortOrder
    isEnclosedHall?: SortOrder
    canBeDarkened?: SortOrder
    hasCooling?: SortOrder
    isGroundFloor?: SortOrder
    hasStorageSpace?: SortOrder
    powerOutlets?: SortOrder
    numTables?: SortOrder
    vrSpace?: SortOrder
    hasWifi?: SortOrder
    lectureHallArea?: SortOrder
    seatingCapacity?: SortOrder
    hasAVFacilities?: SortOrder
    distanceFromExhibition?: SortOrder
    accommodationProvided?: SortOrder
    localTransportation?: SortOrder
    secureParkingSpace?: SortOrder
    manpowerForLoading?: SortOrder
    contactPersonName?: SortOrder
    contactPersonMobile?: SortOrder
    contactPersonEmail?: SortOrder
    venueLocation?: SortOrder
    teacherInvitation?: SortOrder
    teacherRegistration?: SortOrder
    providesWritingMaterials?: SortOrder
    providesRefreshments?: SortOrder
    quizForSchoolStudents?: SortOrder
    quizTeamSelection?: SortOrder
    quizArrangements?: SortOrder
    quizRefreshments?: SortOrder
  }

  export type IPRExhibitionFormAvgOrderByAggregateInput = {
    id?: SortOrder
    powerOutlets?: SortOrder
    numTables?: SortOrder
    seatingCapacity?: SortOrder
    teacherInvitation?: SortOrder
    teacherRegistration?: SortOrder
  }

  export type IPRExhibitionFormMaxOrderByAggregateInput = {
    id?: SortOrder
    hallDimension?: SortOrder
    isEnclosedHall?: SortOrder
    canBeDarkened?: SortOrder
    hasCooling?: SortOrder
    isGroundFloor?: SortOrder
    hasStorageSpace?: SortOrder
    powerOutlets?: SortOrder
    numTables?: SortOrder
    vrSpace?: SortOrder
    hasWifi?: SortOrder
    lectureHallArea?: SortOrder
    seatingCapacity?: SortOrder
    hasAVFacilities?: SortOrder
    distanceFromExhibition?: SortOrder
    accommodationProvided?: SortOrder
    localTransportation?: SortOrder
    secureParkingSpace?: SortOrder
    manpowerForLoading?: SortOrder
    contactPersonName?: SortOrder
    contactPersonMobile?: SortOrder
    contactPersonEmail?: SortOrder
    venueLocation?: SortOrder
    teacherInvitation?: SortOrder
    teacherRegistration?: SortOrder
    providesWritingMaterials?: SortOrder
    providesRefreshments?: SortOrder
    quizForSchoolStudents?: SortOrder
    quizTeamSelection?: SortOrder
    quizArrangements?: SortOrder
    quizRefreshments?: SortOrder
  }

  export type IPRExhibitionFormMinOrderByAggregateInput = {
    id?: SortOrder
    hallDimension?: SortOrder
    isEnclosedHall?: SortOrder
    canBeDarkened?: SortOrder
    hasCooling?: SortOrder
    isGroundFloor?: SortOrder
    hasStorageSpace?: SortOrder
    powerOutlets?: SortOrder
    numTables?: SortOrder
    vrSpace?: SortOrder
    hasWifi?: SortOrder
    lectureHallArea?: SortOrder
    seatingCapacity?: SortOrder
    hasAVFacilities?: SortOrder
    distanceFromExhibition?: SortOrder
    accommodationProvided?: SortOrder
    localTransportation?: SortOrder
    secureParkingSpace?: SortOrder
    manpowerForLoading?: SortOrder
    contactPersonName?: SortOrder
    contactPersonMobile?: SortOrder
    contactPersonEmail?: SortOrder
    venueLocation?: SortOrder
    teacherInvitation?: SortOrder
    teacherRegistration?: SortOrder
    providesWritingMaterials?: SortOrder
    providesRefreshments?: SortOrder
    quizForSchoolStudents?: SortOrder
    quizTeamSelection?: SortOrder
    quizArrangements?: SortOrder
    quizRefreshments?: SortOrder
  }

  export type IPRExhibitionFormSumOrderByAggregateInput = {
    id?: SortOrder
    powerOutlets?: SortOrder
    numTables?: SortOrder
    seatingCapacity?: SortOrder
    teacherInvitation?: SortOrder
    teacherRegistration?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type feedbackFormCreateNestedOneWithoutRatingsInput = {
    create?: XOR<feedbackFormCreateWithoutRatingsInput, feedbackFormUncheckedCreateWithoutRatingsInput>
    connectOrCreate?: feedbackFormCreateOrConnectWithoutRatingsInput
    connect?: feedbackFormWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type feedbackFormUpdateOneRequiredWithoutRatingsNestedInput = {
    create?: XOR<feedbackFormCreateWithoutRatingsInput, feedbackFormUncheckedCreateWithoutRatingsInput>
    connectOrCreate?: feedbackFormCreateOrConnectWithoutRatingsInput
    upsert?: feedbackFormUpsertWithoutRatingsInput
    connect?: feedbackFormWhereUniqueInput
    update?: XOR<XOR<feedbackFormUpdateToOneWithWhereWithoutRatingsInput, feedbackFormUpdateWithoutRatingsInput>, feedbackFormUncheckedUpdateWithoutRatingsInput>
  }

  export type feedbackFormCreatesourcesInput = {
    set: string[]
  }

  export type feedbackFormCreatecampusesInput = {
    set: string[]
  }

  export type RatingsCreateNestedOneWithoutFeedbackFormInput = {
    create?: XOR<RatingsCreateWithoutFeedbackFormInput, RatingsUncheckedCreateWithoutFeedbackFormInput>
    connectOrCreate?: RatingsCreateOrConnectWithoutFeedbackFormInput
    connect?: RatingsWhereUniqueInput
  }

  export type RatingsUncheckedCreateNestedOneWithoutFeedbackFormInput = {
    create?: XOR<RatingsCreateWithoutFeedbackFormInput, RatingsUncheckedCreateWithoutFeedbackFormInput>
    connectOrCreate?: RatingsCreateOrConnectWithoutFeedbackFormInput
    connect?: RatingsWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type feedbackFormUpdatesourcesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type feedbackFormUpdatecampusesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type RatingsUpdateOneWithoutFeedbackFormNestedInput = {
    create?: XOR<RatingsCreateWithoutFeedbackFormInput, RatingsUncheckedCreateWithoutFeedbackFormInput>
    connectOrCreate?: RatingsCreateOrConnectWithoutFeedbackFormInput
    upsert?: RatingsUpsertWithoutFeedbackFormInput
    disconnect?: RatingsWhereInput | boolean
    delete?: RatingsWhereInput | boolean
    connect?: RatingsWhereUniqueInput
    update?: XOR<XOR<RatingsUpdateToOneWithWhereWithoutFeedbackFormInput, RatingsUpdateWithoutFeedbackFormInput>, RatingsUncheckedUpdateWithoutFeedbackFormInput>
  }

  export type RatingsUncheckedUpdateOneWithoutFeedbackFormNestedInput = {
    create?: XOR<RatingsCreateWithoutFeedbackFormInput, RatingsUncheckedCreateWithoutFeedbackFormInput>
    connectOrCreate?: RatingsCreateOrConnectWithoutFeedbackFormInput
    upsert?: RatingsUpsertWithoutFeedbackFormInput
    disconnect?: RatingsWhereInput | boolean
    delete?: RatingsWhereInput | boolean
    connect?: RatingsWhereUniqueInput
    update?: XOR<XOR<RatingsUpdateToOneWithWhereWithoutFeedbackFormInput, RatingsUpdateWithoutFeedbackFormInput>, RatingsUncheckedUpdateWithoutFeedbackFormInput>
  }

  export type VisitorCreatecampusInput = {
    set: string[]
  }

  export type VisitorCreatematerialsInput = {
    set: string[]
  }

  export type VisitorUpdatecampusInput = {
    set?: string[]
    push?: string | string[]
  }

  export type VisitorUpdatematerialsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type feedbackFormCreateWithoutRatingsInput = {
    institutionName: string
    website: string
    visitDate: Date | string
    staffName: string
    staffEmail: string
    staffMobile: string
    totalStudents: number
    accompanyingStaff: number
    sources?: feedbackFormCreatesourcesInput | string[]
    campuses?: feedbackFormCreatecampusesInput | string[]
    best?: string | null
    worst?: string | null
    suggestions?: string | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type feedbackFormUncheckedCreateWithoutRatingsInput = {
    id?: number
    institutionName: string
    website: string
    visitDate: Date | string
    staffName: string
    staffEmail: string
    staffMobile: string
    totalStudents: number
    accompanyingStaff: number
    sources?: feedbackFormCreatesourcesInput | string[]
    campuses?: feedbackFormCreatecampusesInput | string[]
    best?: string | null
    worst?: string | null
    suggestions?: string | null
    comments?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type feedbackFormCreateOrConnectWithoutRatingsInput = {
    where: feedbackFormWhereUniqueInput
    create: XOR<feedbackFormCreateWithoutRatingsInput, feedbackFormUncheckedCreateWithoutRatingsInput>
  }

  export type feedbackFormUpsertWithoutRatingsInput = {
    update: XOR<feedbackFormUpdateWithoutRatingsInput, feedbackFormUncheckedUpdateWithoutRatingsInput>
    create: XOR<feedbackFormCreateWithoutRatingsInput, feedbackFormUncheckedCreateWithoutRatingsInput>
    where?: feedbackFormWhereInput
  }

  export type feedbackFormUpdateToOneWithWhereWithoutRatingsInput = {
    where?: feedbackFormWhereInput
    data: XOR<feedbackFormUpdateWithoutRatingsInput, feedbackFormUncheckedUpdateWithoutRatingsInput>
  }

  export type feedbackFormUpdateWithoutRatingsInput = {
    institutionName?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    visitDate?: DateTimeFieldUpdateOperationsInput | Date | string
    staffName?: StringFieldUpdateOperationsInput | string
    staffEmail?: StringFieldUpdateOperationsInput | string
    staffMobile?: StringFieldUpdateOperationsInput | string
    totalStudents?: IntFieldUpdateOperationsInput | number
    accompanyingStaff?: IntFieldUpdateOperationsInput | number
    sources?: feedbackFormUpdatesourcesInput | string[]
    campuses?: feedbackFormUpdatecampusesInput | string[]
    best?: NullableStringFieldUpdateOperationsInput | string | null
    worst?: NullableStringFieldUpdateOperationsInput | string | null
    suggestions?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type feedbackFormUncheckedUpdateWithoutRatingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    institutionName?: StringFieldUpdateOperationsInput | string
    website?: StringFieldUpdateOperationsInput | string
    visitDate?: DateTimeFieldUpdateOperationsInput | Date | string
    staffName?: StringFieldUpdateOperationsInput | string
    staffEmail?: StringFieldUpdateOperationsInput | string
    staffMobile?: StringFieldUpdateOperationsInput | string
    totalStudents?: IntFieldUpdateOperationsInput | number
    accompanyingStaff?: IntFieldUpdateOperationsInput | number
    sources?: feedbackFormUpdatesourcesInput | string[]
    campuses?: feedbackFormUpdatecampusesInput | string[]
    best?: NullableStringFieldUpdateOperationsInput | string | null
    worst?: NullableStringFieldUpdateOperationsInput | string | null
    suggestions?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingsCreateWithoutFeedbackFormInput = {
    iprRating: number
    fciptRating: number
    knowledge: number
    explanationsIPR: number
    explanationsFCIPT: number
    knowledgeBefore: number
    knowledgeAfter: number
    technicalContents: number
    easeOfUnderstanding: number
  }

  export type RatingsUncheckedCreateWithoutFeedbackFormInput = {
    id?: number
    iprRating: number
    fciptRating: number
    knowledge: number
    explanationsIPR: number
    explanationsFCIPT: number
    knowledgeBefore: number
    knowledgeAfter: number
    technicalContents: number
    easeOfUnderstanding: number
  }

  export type RatingsCreateOrConnectWithoutFeedbackFormInput = {
    where: RatingsWhereUniqueInput
    create: XOR<RatingsCreateWithoutFeedbackFormInput, RatingsUncheckedCreateWithoutFeedbackFormInput>
  }

  export type RatingsUpsertWithoutFeedbackFormInput = {
    update: XOR<RatingsUpdateWithoutFeedbackFormInput, RatingsUncheckedUpdateWithoutFeedbackFormInput>
    create: XOR<RatingsCreateWithoutFeedbackFormInput, RatingsUncheckedCreateWithoutFeedbackFormInput>
    where?: RatingsWhereInput
  }

  export type RatingsUpdateToOneWithWhereWithoutFeedbackFormInput = {
    where?: RatingsWhereInput
    data: XOR<RatingsUpdateWithoutFeedbackFormInput, RatingsUncheckedUpdateWithoutFeedbackFormInput>
  }

  export type RatingsUpdateWithoutFeedbackFormInput = {
    iprRating?: IntFieldUpdateOperationsInput | number
    fciptRating?: IntFieldUpdateOperationsInput | number
    knowledge?: IntFieldUpdateOperationsInput | number
    explanationsIPR?: IntFieldUpdateOperationsInput | number
    explanationsFCIPT?: IntFieldUpdateOperationsInput | number
    knowledgeBefore?: IntFieldUpdateOperationsInput | number
    knowledgeAfter?: IntFieldUpdateOperationsInput | number
    technicalContents?: IntFieldUpdateOperationsInput | number
    easeOfUnderstanding?: IntFieldUpdateOperationsInput | number
  }

  export type RatingsUncheckedUpdateWithoutFeedbackFormInput = {
    id?: IntFieldUpdateOperationsInput | number
    iprRating?: IntFieldUpdateOperationsInput | number
    fciptRating?: IntFieldUpdateOperationsInput | number
    knowledge?: IntFieldUpdateOperationsInput | number
    explanationsIPR?: IntFieldUpdateOperationsInput | number
    explanationsFCIPT?: IntFieldUpdateOperationsInput | number
    knowledgeBefore?: IntFieldUpdateOperationsInput | number
    knowledgeAfter?: IntFieldUpdateOperationsInput | number
    technicalContents?: IntFieldUpdateOperationsInput | number
    easeOfUnderstanding?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use RatingsDefaultArgs instead
     */
    export type RatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RatingsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use feedbackFormDefaultArgs instead
     */
    export type feedbackFormArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = feedbackFormDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VisitorDefaultArgs instead
     */
    export type VisitorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VisitorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use IPRExhibitionFormDefaultArgs instead
     */
    export type IPRExhibitionFormArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = IPRExhibitionFormDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}